
LED_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007910  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08007ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          000007c8  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000858  20000858  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a0e1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003a7f  00000000  00000000  0003a1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000011e8  00000000  00000000  0003dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001040  00000000  00000000  0003ee08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009955  00000000  00000000  0003fe48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005b17  00000000  00000000  0004979d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004f2b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a64  00000000  00000000  0004f330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a80 	.word	0x08007a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007a80 	.word	0x08007a80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4a71      	ldr	r2, [pc, #452]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80004f4:	4b70      	ldr	r3, [pc, #448]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b6e      	ldr	r3, [pc, #440]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4a6a      	ldr	r2, [pc, #424]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000510:	4b69      	ldr	r3, [pc, #420]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b67      	ldr	r3, [pc, #412]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4a63      	ldr	r2, [pc, #396]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800052c:	4b62      	ldr	r3, [pc, #392]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b60      	ldr	r3, [pc, #384]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4a5c      	ldr	r2, [pc, #368]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000548:	4b5b      	ldr	r3, [pc, #364]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4a55      	ldr	r2, [pc, #340]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000564:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b52      	ldr	r3, [pc, #328]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4a4e      	ldr	r2, [pc, #312]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000580:	4b4d      	ldr	r3, [pc, #308]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b4b      	ldr	r3, [pc, #300]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4848      	ldr	r0, [pc, #288]	; (80006bc <MX_GPIO_Init+0x1e4>)
 800059c:	f000 fef6 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4846      	ldr	r0, [pc, #280]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 80005a6:	f000 fef1 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b0:	4844      	ldr	r0, [pc, #272]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 80005b2:	f000 feeb 	bl	800138c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005b6:	2308      	movs	r3, #8
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	483b      	ldr	r0, [pc, #236]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80005ce:	f000 fd43 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4835      	ldr	r0, [pc, #212]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 80005ea:	f000 fd35 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ee:	2308      	movs	r3, #8
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	2302      	movs	r3, #2
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005fe:	2305      	movs	r3, #5
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	482d      	ldr	r0, [pc, #180]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 800060a:	f000 fd25 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060e:	2301      	movs	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0x1f0>)
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <MX_GPIO_Init+0x1f4>)
 8000622:	f000 fd19 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000626:	2304      	movs	r3, #4
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <MX_GPIO_Init+0x1f8>)
 800063a:	f000 fd0d 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800063e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000650:	2305      	movs	r3, #5
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	481d      	ldr	r0, [pc, #116]	; (80006d0 <MX_GPIO_Init+0x1f8>)
 800065c:	f000 fcfc 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000660:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000664:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 800067a:	f000 fced 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800067e:	2320      	movs	r3, #32
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 8000692:	f000 fce1 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000696:	2302      	movs	r3, #2
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_GPIO_Init+0x1f0>)
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80006aa:	f000 fcd5 	bl	8001058 <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	; 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	10120000 	.word	0x10120000
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400

080006d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_I2C1_Init+0x50>)
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <MX_I2C1_Init+0x54>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_I2C1_Init+0x50>)
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_I2C1_Init+0x58>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_I2C1_Init+0x50>)
 80006f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_I2C1_Init+0x50>)
 8000712:	f002 fb5b 	bl	8002dcc <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f9d0 	bl	8000ac0 <Error_Handler>
  }

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000c0 	.word	0x200000c0
 8000728:	40005400 	.word	0x40005400
 800072c:	000186a0 	.word	0x000186a0

08000730 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_I2C_MspInit+0x84>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d12c      	bne.n	80007ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800076e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000774:	2312      	movs	r3, #18
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000780:	2304      	movs	r3, #4
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <HAL_I2C_MspInit+0x8c>)
 800078c:	f000 fc64 	bl	8001058 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_I2C_MspInit+0x88>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400

080007c0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_I2S3_Init+0x54>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_I2S3_Init+0x58>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2S3_Init+0x54>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_I2S3_Init+0x54>)
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <MX_I2S3_Init+0x5c>)
 80007ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_I2S3_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_I2S3_Init+0x54>)
 8000800:	f002 fc1c 	bl	800303c <HAL_I2S_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080a:	f000 f959 	bl	8000ac0 <Error_Handler>
  }

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000114 	.word	0x20000114
 8000818:	40003c00 	.word	0x40003c00
 800081c:	00017700 	.word	0x00017700

08000820 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <HAL_I2S_MspInit+0xc0>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d14a      	bne.n	80008d8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_I2S_MspInit+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000896:	2310      	movs	r3, #16
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a6:	2306      	movs	r3, #6
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <HAL_I2S_MspInit+0xc8>)
 80008b2:	f000 fbd1 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008b6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c8:	2306      	movs	r3, #6
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <HAL_I2S_MspInit+0xcc>)
 80008d4:	f000 fbc0 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40003c00 	.word	0x40003c00
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fa0c 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f860 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff fdec 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000900:	f7ff fee8 	bl	80006d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000904:	f7ff ff5c 	bl	80007c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000908:	f000 f8e2 	bl	8000ad0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800090c:	f006 fc86 	bl	800721c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000916:	4828      	ldr	r0, [pc, #160]	; (80009b8 <main+0xc8>)
 8000918:	f000 fd38 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000922:	4825      	ldr	r0, [pc, #148]	; (80009b8 <main+0xc8>)
 8000924:	f000 fd32 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092e:	4822      	ldr	r0, [pc, #136]	; (80009b8 <main+0xc8>)
 8000930:	f000 fd2c 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <main+0xc8>)
 800093c:	f000 fd26 	bl	800138c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000946:	481c      	ldr	r0, [pc, #112]	; (80009b8 <main+0xc8>)
 8000948:	f000 fd20 	bl	800138c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000952:	4819      	ldr	r0, [pc, #100]	; (80009b8 <main+0xc8>)
 8000954:	f000 fd1a 	bl	800138c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <main+0xc8>)
 8000960:	f000 fd14 	bl	800138c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <main+0xc8>)
 800096c:	f000 fd0e 	bl	800138c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000974:	f000 fa3e 	bl	8000df4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <main+0xc8>)
 8000980:	f000 fd04 	bl	800138c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <main+0xc8>)
 800098c:	f000 fcfe 	bl	800138c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000996:	4808      	ldr	r0, [pc, #32]	; (80009b8 <main+0xc8>)
 8000998:	f000 fcf8 	bl	800138c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <main+0xc8>)
 80009a4:	f000 fcf2 	bl	800138c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80009a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ac:	f000 fa22 	bl	8000df4 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009b0:	f006 fc5a 	bl	8007268 <MX_USB_HOST_Process>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 80009b4:	e7c4      	b.n	8000940 <main+0x50>
 80009b6:	bf00      	nop
 80009b8:	40020c00 	.word	0x40020c00

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b098      	sub	sp, #96	; 0x60
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f006 ff92 	bl	80078f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <SystemClock_Config+0xfc>)
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <SystemClock_Config+0xfc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <SystemClock_Config+0xfc>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <SystemClock_Config+0x100>)
 8000a10:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <SystemClock_Config+0x100>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0x100>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a3e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a42:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 ff91 	bl	8003978 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a5c:	f000 f830 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f9ea 	bl	8003e58 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a8a:	f000 f819 	bl	8000ac0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a92:	23c0      	movs	r3, #192	; 0xc0
 8000a94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fbb8 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aaa:	f000 f809 	bl	8000ac0 <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3760      	adds	r7, #96	; 0x60
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000ad6:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <MX_SPI1_Init+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000b1c:	220a      	movs	r2, #10
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_SPI1_Init+0x64>)
 8000b22:	f003 fcb5 	bl	8004490 <HAL_SPI_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b2c:	f7ff ffc8 	bl	8000ac0 <Error_Handler>
  }

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000015c 	.word	0x2000015c
 8000b38:	40013000 	.word	0x40013000

08000b3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_SPI_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b96:	23e0      	movs	r3, #224	; 0xe0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_SPI_MspInit+0x8c>)
 8000bb2:	f000 fa51 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40013000 	.word	0x40013000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0a:	2007      	movs	r0, #7
 8000c0c:	f000 f9e2 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8a0 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <OTG_FS_IRQHandler+0x10>)
 8000c7e:	f000 fe2d 	bl	80018dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000590 	.word	0x20000590

08000c8c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x50>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x16>
		heap_end = &end;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <_sbrk+0x50>)
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <_sbrk+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <_sbrk+0x50>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <_sbrk+0x50>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	466a      	mov	r2, sp
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d907      	bls.n	8000cc6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000cb6:	f006 fde3 	bl	8007880 <__errno>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	e006      	b.n	8000cd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <_sbrk+0x50>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <_sbrk+0x50>)
 8000cd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000ac 	.word	0x200000ac
 8000ce0:	20000858 	.word	0x20000858

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <SystemInit+0x28>)
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <SystemInit+0x28>)
 8000cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SystemInit+0x28>)
 8000cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f94b 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff ff42 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f963 	bl	800103e <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f92b 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	200001b4 	.word	0x200001b4

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200001b4 	.word	0x200001b4

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_Delay+0x40>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad2      	subs	r2, r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d3f7      	bcc.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	4909      	ldr	r1, [pc, #36]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	095b      	lsrs	r3, r3, #5
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	f002 021f 	and.w	r2, r2, #31
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	490d      	ldr	r1, [pc, #52]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	4909      	ldr	r1, [pc, #36]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	2201      	movs	r2, #1
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f72:	2101      	movs	r1, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	1e59      	subs	r1, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff90 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff2b 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff40 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff33 	bl	8000e9c <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e16b      	b.n	800134c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 815a 	bne.w	8001346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d00b      	beq.n	80010b2 <HAL_GPIO_Init+0x5a>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a6:	2b11      	cmp	r3, #17
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b12      	cmp	r3, #18
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0xfc>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b12      	cmp	r3, #18
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80b4 	beq.w	8001346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4a5f      	ldr	r2, [pc, #380]	; (8001360 <HAL_GPIO_Init+0x308>)
 80011e4:	4b5e      	ldr	r3, [pc, #376]	; (8001360 <HAL_GPIO_Init+0x308>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_GPIO_Init+0x308>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fa:	4a5a      	ldr	r2, [pc, #360]	; (8001364 <HAL_GPIO_Init+0x30c>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <HAL_GPIO_Init+0x310>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x226>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_GPIO_Init+0x314>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x222>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_GPIO_Init+0x318>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x21e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <HAL_GPIO_Init+0x31c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x21a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <HAL_GPIO_Init+0x320>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x216>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4c      	ldr	r2, [pc, #304]	; (800137c <HAL_GPIO_Init+0x324>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x212>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <HAL_GPIO_Init+0x328>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x20e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4a      	ldr	r2, [pc, #296]	; (8001384 <HAL_GPIO_Init+0x32c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x20a>
 800125e:	2307      	movs	r3, #7
 8001260:	e00e      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001262:	2308      	movs	r3, #8
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001266:	2306      	movs	r3, #6
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4934      	ldr	r1, [pc, #208]	; (8001364 <HAL_GPIO_Init+0x30c>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <HAL_GPIO_Init+0x330>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_GPIO_Init+0x330>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x330>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x330>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_GPIO_Init+0x330>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_GPIO_Init+0x330>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x330>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_GPIO_Init+0x330>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae90 	bls.w	8001074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	3724      	adds	r7, #36	; 0x24
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c0:	b08f      	sub	sp, #60	; 0x3c
 80013c2:	af0a      	add	r7, sp, #40	; 0x28
 80013c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e054      	b.n	800147a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f005 ff74 	bl	80072d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 f913 	bl	800463a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	687e      	ldr	r6, [r7, #4]
 800141c:	466d      	mov	r5, sp
 800141e:	f106 0410 	add.w	r4, r6, #16
 8001422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800142e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001432:	1d33      	adds	r3, r6, #4
 8001434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f003 f88d 	bl	8004556 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f003 f90a 	bl	800465c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	687e      	ldr	r6, [r7, #4]
 8001450:	466d      	mov	r5, sp
 8001452:	f106 0410 	add.w	r4, r6, #16
 8001456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001462:	e885 0003 	stmia.w	r5, {r0, r1}
 8001466:	1d33      	adds	r3, r6, #4
 8001468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f003 fa1c 	bl	80048a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001482 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001482:	b590      	push	{r4, r7, lr}
 8001484:	b089      	sub	sp, #36	; 0x24
 8001486:	af04      	add	r7, sp, #16
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	4608      	mov	r0, r1
 800148c:	4611      	mov	r1, r2
 800148e:	461a      	mov	r2, r3
 8001490:	4603      	mov	r3, r0
 8001492:	70fb      	strb	r3, [r7, #3]
 8001494:	460b      	mov	r3, r1
 8001496:	70bb      	strb	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_HCD_HC_Init+0x28>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e07f      	b.n	80015aa <HAL_HCD_HC_Init+0x128>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	333d      	adds	r3, #61	; 0x3d
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	3338      	adds	r3, #56	; 0x38
 80014d6:	787a      	ldrb	r2, [r7, #1]
 80014d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3340      	adds	r3, #64	; 0x40
 80014ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014ec:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014ee:	78fa      	ldrb	r2, [r7, #3]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	3339      	adds	r3, #57	; 0x39
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001502:	78fa      	ldrb	r2, [r7, #3]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	333f      	adds	r3, #63	; 0x3f
 8001512:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001518:	78fa      	ldrb	r2, [r7, #3]
 800151a:	78bb      	ldrb	r3, [r7, #2]
 800151c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	333a      	adds	r3, #58	; 0x3a
 8001530:	4602      	mov	r2, r0
 8001532:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001534:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001538:	2b00      	cmp	r3, #0
 800153a:	da0a      	bge.n	8001552 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	333b      	adds	r3, #59	; 0x3b
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e009      	b.n	8001566 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	333b      	adds	r3, #59	; 0x3b
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	333c      	adds	r3, #60	; 0x3c
 8001576:	f897 2020 	ldrb.w	r2, [r7, #32]
 800157a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	787c      	ldrb	r4, [r7, #1]
 8001582:	78ba      	ldrb	r2, [r7, #2]
 8001584:	78f9      	ldrb	r1, [r7, #3]
 8001586:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4623      	mov	r3, r4
 8001598:	f003 fb10 	bl	8004bbc <USB_HC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_HCD_HC_Halt+0x1e>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e00f      	b.n	80015f0 <HAL_HCD_HC_Halt+0x3e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fd56 	bl	8005092 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4603      	mov	r3, r0
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	460b      	mov	r3, r1
 800160c:	70bb      	strb	r3, [r7, #2]
 800160e:	4613      	mov	r3, r2
 8001610:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	333b      	adds	r3, #59	; 0x3b
 8001622:	78ba      	ldrb	r2, [r7, #2]
 8001624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	333f      	adds	r3, #63	; 0x3f
 8001636:	787a      	ldrb	r2, [r7, #1]
 8001638:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800163a:	7c3b      	ldrb	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d114      	bne.n	800166a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3342      	adds	r3, #66	; 0x42
 8001650:	2203      	movs	r2, #3
 8001652:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	333d      	adds	r3, #61	; 0x3d
 8001664:	7f3a      	ldrb	r2, [r7, #28]
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e009      	b.n	800167e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	3342      	adds	r3, #66	; 0x42
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800167e:	787b      	ldrb	r3, [r7, #1]
 8001680:	2b03      	cmp	r3, #3
 8001682:	f200 80d6 	bhi.w	8001832 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	0800181d 	.word	0x0800181d
 8001694:	08001709 	.word	0x08001709
 8001698:	08001793 	.word	0x08001793
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800169c:	7c3b      	ldrb	r3, [r7, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 80c9 	bne.w	8001836 <HAL_HCD_HC_SubmitRequest+0x23e>
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 80c5 	bne.w	8001836 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80016ac:	8b3b      	ldrh	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3351      	adds	r3, #81	; 0x51
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3351      	adds	r3, #81	; 0x51
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10a      	bne.n	80016f2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3342      	adds	r3, #66	; 0x42
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016f0:	e0a1      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3342      	adds	r3, #66	; 0x42
 8001702:	2202      	movs	r2, #2
 8001704:	701a      	strb	r2, [r3, #0]
      break;
 8001706:	e096      	b.n	8001836 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001708:	78bb      	ldrb	r3, [r7, #2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d120      	bne.n	8001750 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3351      	adds	r3, #81	; 0x51
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10a      	bne.n	800173a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3342      	adds	r3, #66	; 0x42
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001738:	e07e      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3342      	adds	r3, #66	; 0x42
 800174a:	2202      	movs	r2, #2
 800174c:	701a      	strb	r2, [r3, #0]
      break;
 800174e:	e073      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3350      	adds	r3, #80	; 0x50
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	3342      	adds	r3, #66	; 0x42
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
      break;
 800177a:	e05d      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	3342      	adds	r3, #66	; 0x42
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
      break;
 8001790:	e052      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001792:	78bb      	ldrb	r3, [r7, #2]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d120      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3351      	adds	r3, #81	; 0x51
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10a      	bne.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	3342      	adds	r3, #66	; 0x42
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017c2:	e039      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3342      	adds	r3, #66	; 0x42
 80017d4:	2202      	movs	r2, #2
 80017d6:	701a      	strb	r2, [r3, #0]
      break;
 80017d8:	e02e      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3350      	adds	r3, #80	; 0x50
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10a      	bne.n	8001806 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3342      	adds	r3, #66	; 0x42
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      break;
 8001804:	e018      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	3342      	adds	r3, #66	; 0x42
 8001816:	2202      	movs	r2, #2
 8001818:	701a      	strb	r2, [r3, #0]
      break;
 800181a:	e00d      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3342      	adds	r3, #66	; 0x42
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
      break;
 8001830:	e002      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001836:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3344      	adds	r3, #68	; 0x44
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	8b39      	ldrh	r1, [r7, #24]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4403      	add	r3, r0
 800185c:	3348      	adds	r3, #72	; 0x48
 800185e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	335c      	adds	r3, #92	; 0x5c
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	334c      	adds	r3, #76	; 0x4c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3339      	adds	r3, #57	; 0x39
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	335d      	adds	r3, #93	; 0x5d
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	3338      	adds	r3, #56	; 0x38
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	18d1      	adds	r1, r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	f003 fa88 	bl	8004de0 <USB_HC_StartXfer>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop

080018dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 ff95 	bl	8004822 <USB_GetMode>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	f040 80ef 	bne.w	8001ade <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f002 ff79 	bl	80047fc <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80e5 	beq.w	8001adc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 ff70 	bl	80047fc <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001926:	d104      	bne.n	8001932 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001930:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 ff60 	bl	80047fc <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001946:	d104      	bne.n	8001952 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001950:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 ff50 	bl	80047fc <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001966:	d104      	bne.n	8001972 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001970:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f002 ff40 	bl	80047fc <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d103      	bne.n	800198e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2202      	movs	r2, #2
 800198c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 ff32 	bl	80047fc <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800199e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a2:	d115      	bne.n	80019d0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d108      	bne.n	80019d0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f005 fd08 	bl	80073d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 f82a 	bl	8004a24 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 ff11 	bl	80047fc <USB_ReadInterrupts>
 80019da:	4603      	mov	r3, r0
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d102      	bne.n	80019ec <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f001 f97c 	bl	8002ce4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 ff03 	bl	80047fc <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d106      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f005 fccb 	bl	800739c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 fef2 	bl	80047fc <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a22:	d138      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fb21 	bl	8005070 <USB_HC_ReadInterrupt>
 8001a2e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e025      	b.n	8001a82 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d018      	beq.n	8001a7c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a60:	d106      	bne.n	8001a70 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f8cf 	bl	8001c0c <HCD_HC_IN_IRQHandler>
 8001a6e:	e005      	b.n	8001a7c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fd08 	bl	800248c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8d4      	bhi.n	8001a36 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 feae 	bl	80047fc <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d101      	bne.n	8001aae <HAL_HCD_IRQHandler+0x1d2>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_HCD_IRQHandler+0x1d4>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d014      	beq.n	8001ade <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	6992      	ldr	r2, [r2, #24]
 8001abe:	f022 0210 	bic.w	r2, r2, #16
 8001ac2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f001 f861 	bl	8002b8c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	6992      	ldr	r2, [r2, #24]
 8001ad4:	f042 0210 	orr.w	r2, r2, #16
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	e000      	b.n	8001ade <HAL_HCD_IRQHandler+0x202>
      return;
 8001adc:	bf00      	nop
    }
  }
}
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_HCD_Start+0x16>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e013      	b.n	8001b22 <HAL_HCD_Start+0x3e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fd86 	bl	8004618 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 ffee 	bl	8004af4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_HCD_Stop+0x16>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e00d      	b.n	8001b5c <HAL_HCD_Stop+0x32>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fbe5 	bl	800531c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 ff93 	bl	8004a9c <USB_ResetPort>
 8001b76:	4603      	mov	r3, r0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	335c      	adds	r3, #92	; 0x5c
 8001b9c:	781b      	ldrb	r3, [r3, #0]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	334c      	adds	r3, #76	; 0x4c
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 ffd9 	bl	8004b98 <USB_GetCurrentFrame>
 8001be6:	4603      	mov	r3, r0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 ffb4 	bl	8004b6a <USB_GetHostSpeed>
 8001c02:	4603      	mov	r3, r0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d11a      	bne.n	8001c72 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e0d1      	b.n	8001e16 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c88:	d12d      	bne.n	8001ce6 <HCD_HC_IN_IRQHandler+0xda>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	335d      	adds	r3, #93	; 0x5d
 8001cae:	2207      	movs	r2, #7
 8001cb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f9d7 	bl	8005092 <USB_HC_Halt>
 8001ce4:	e097      	b.n	8001e16 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d109      	bne.n	8001d10 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	6093      	str	r3, [r2, #8]
 8001d0e:	e082      	b.n	8001e16 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d135      	bne.n	8001d92 <HCD_HC_IN_IRQHandler+0x186>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	4619      	mov	r1, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	335d      	adds	r3, #93	; 0x5d
 8001d58:	2205      	movs	r2, #5
 8001d5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 f981 	bl	8005092 <USB_HC_Halt>
 8001d90:	e041      	b.n	8001e16 <HCD_HC_IN_IRQHandler+0x20a>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da8:	d135      	bne.n	8001e16 <HCD_HC_IN_IRQHandler+0x20a>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	4619      	mov	r1, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 f95b 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	461a      	mov	r2, r3
 8001dea:	2310      	movs	r3, #16
 8001dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	335d      	adds	r3, #93	; 0x5d
 8001dfe:	2208      	movs	r2, #8
 8001e00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e14:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2c:	d123      	bne.n	8001e76 <HCD_HC_IN_IRQHandler+0x26a>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 f919 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e72:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e74:	e306      	b.n	8002484 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 80ff 	bne.w	800208c <HCD_HC_IN_IRQHandler+0x480>
    if (hhcd->Init.dma_enable != 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01b      	beq.n	8001ece <HCD_HC_IN_IRQHandler+0x2c2>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3348      	adds	r3, #72	; 0x48
 8001ea6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	440b      	add	r3, r1
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001eba:	1ad1      	subs	r1, r2, r3
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4403      	add	r3, r0
 8001eca:	334c      	adds	r3, #76	; 0x4c
 8001ecc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	335d      	adds	r3, #93	; 0x5d
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3358      	adds	r3, #88	; 0x58
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	461a      	mov	r2, r3
 8001f04:	2301      	movs	r3, #1
 8001f06:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	333f      	adds	r3, #63	; 0x3f
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HCD_HC_IN_IRQHandler+0x328>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	333f      	adds	r3, #63	; 0x3f
 8001f2e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d122      	bne.n	8001f7a <HCD_HC_IN_IRQHandler+0x36e>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	4619      	mov	r1, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f896 	bl	8005092 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	2310      	movs	r3, #16
 8001f76:	6093      	str	r3, [r2, #8]
 8001f78:	e071      	b.n	800205e <HCD_HC_IN_IRQHandler+0x452>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	333f      	adds	r3, #63	; 0x3f
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d12b      	bne.n	8001fe8 <HCD_HC_IN_IRQHandler+0x3dc>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fb0:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	335c      	adds	r3, #92	; 0x5c
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	b2d8      	uxtb	r0, r3
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	335c      	adds	r3, #92	; 0x5c
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4601      	mov	r1, r0
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f005 fa05 	bl	80073f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fe6:	e03a      	b.n	800205e <HCD_HC_IN_IRQHandler+0x452>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	333f      	adds	r3, #63	; 0x3f
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d12f      	bne.n	800205e <HCD_HC_IN_IRQHandler+0x452>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	335c      	adds	r3, #92	; 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	3350      	adds	r3, #80	; 0x50
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	f083 0301 	eor.w	r3, r3, #1
 8002028:	b2d8      	uxtb	r0, r3
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	3350      	adds	r3, #80	; 0x50
 800203a:	4602      	mov	r2, r0
 800203c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	b2d8      	uxtb	r0, r3
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335c      	adds	r3, #92	; 0x5c
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4601      	mov	r1, r0
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f005 f9c9 	bl	80073f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	3350      	adds	r3, #80	; 0x50
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2d8      	uxtb	r0, r3
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	3350      	adds	r3, #80	; 0x50
 8002086:	4602      	mov	r2, r0
 8002088:	701a      	strb	r2, [r3, #0]
}
 800208a:	e1fb      	b.n	8002484 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 811b 	bne.w	80022da <HCD_HC_IN_IRQHandler+0x6ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	4619      	mov	r1, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f023 0302 	bic.w	r3, r3, #2
 80020c4:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	335d      	adds	r3, #93	; 0x5d
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10a      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x4e6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	335c      	adds	r3, #92	; 0x5c
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e0d9      	b.n	80022a6 <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	335d      	adds	r3, #93	; 0x5d
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10a      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x512>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	335c      	adds	r3, #92	; 0x5c
 8002118:	2205      	movs	r2, #5
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e0c3      	b.n	80022a6 <HCD_HC_IN_IRQHandler+0x69a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	335d      	adds	r3, #93	; 0x5d
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d00a      	beq.n	800214a <HCD_HC_IN_IRQHandler+0x53e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	335d      	adds	r3, #93	; 0x5d
 8002144:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002146:	2b08      	cmp	r3, #8
 8002148:	d156      	bne.n	80021f8 <HCD_HC_IN_IRQHandler+0x5ec>
      hhcd->hc[ch_num].ErrCnt++;
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3358      	adds	r3, #88	; 0x58
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1c59      	adds	r1, r3, #1
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4403      	add	r3, r0
 800216c:	3358      	adds	r3, #88	; 0x58
 800216e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	3358      	adds	r3, #88	; 0x58
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d914      	bls.n	80021b0 <HCD_HC_IN_IRQHandler+0x5a4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3358      	adds	r3, #88	; 0x58
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	335c      	adds	r3, #92	; 0x5c
 80021aa:	2204      	movs	r2, #4
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e009      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x5b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e056      	b.n	80022a6 <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	335d      	adds	r3, #93	; 0x5d
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d123      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	335c      	adds	r3, #92	; 0x5c
 800221e:	2202      	movs	r2, #2
 8002220:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002238:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002240:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e027      	b.n	80022a6 <HCD_HC_IN_IRQHandler+0x69a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	335d      	adds	r3, #93	; 0x5d
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b07      	cmp	r3, #7
 800226a:	d11c      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x69a>
      hhcd->hc[ch_num].ErrCnt++;
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	3358      	adds	r3, #88	; 0x58
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4403      	add	r3, r0
 800228e:	3358      	adds	r3, #88	; 0x58
 8002290:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	335c      	adds	r3, #92	; 0x5c
 80022a2:	2204      	movs	r2, #4
 80022a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2302      	movs	r3, #2
 80022b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4601      	mov	r1, r0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f005 f88c 	bl	80073f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022d8:	e0d4      	b.n	8002484 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d13f      	bne.n	8002370 <HCD_HC_IN_IRQHandler+0x764>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	4619      	mov	r1, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	3358      	adds	r3, #88	; 0x58
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	1c59      	adds	r1, r3, #1
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4403      	add	r3, r0
 8002334:	3358      	adds	r3, #88	; 0x58
 8002336:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	335d      	adds	r3, #93	; 0x5d
 8002348:	2206      	movs	r2, #6
 800234a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fe9b 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	6093      	str	r3, [r2, #8]
}
 800236e:	e089      	b.n	8002484 <HCD_HC_IN_IRQHandler+0x878>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d17e      	bne.n	8002484 <HCD_HC_IN_IRQHandler+0x878>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	333f      	adds	r3, #63	; 0x3f
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d123      	bne.n	80023e4 <HCD_HC_IN_IRQHandler+0x7d8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3358      	adds	r3, #88	; 0x58
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	4619      	mov	r1, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fe58 	bl	8005092 <USB_HC_Halt>
 80023e2:	e046      	b.n	8002472 <HCD_HC_IN_IRQHandler+0x866>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	333f      	adds	r3, #63	; 0x3f
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HCD_HC_IN_IRQHandler+0x804>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	333f      	adds	r3, #63	; 0x3f
 800240a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800240c:	2b02      	cmp	r3, #2
 800240e:	d130      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x866>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3358      	adds	r3, #88	; 0x58
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d122      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x866>
        hhcd->hc[ch_num].state = HC_NAK;
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	335d      	adds	r3, #93	; 0x5d
 800243c:	2203      	movs	r2, #3
 800243e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	4619      	mov	r1, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fe10 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	2310      	movs	r3, #16
 8002482:	6093      	str	r3, [r2, #8]
}
 8002484:	bf00      	nop
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d11a      	bne.n	80024f2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	2304      	movs	r3, #4
 80024cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	4619      	mov	r1, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 80024f0:	e347      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b20      	cmp	r3, #32
 8002506:	d142      	bne.n	800258e <HCD_HC_OUT_IRQHandler+0x102>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2320      	movs	r3, #32
 8002518:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	333d      	adds	r3, #61	; 0x3d
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 8328 	bne.w	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	333d      	adds	r3, #61	; 0x3d
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	335c      	adds	r3, #92	; 0x5c
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	4619      	mov	r1, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f043 0302 	orr.w	r3, r3, #2
 800257a:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f002 fd83 	bl	8005092 <USB_HC_Halt>
}
 800258c:	e2f9      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d140      	bne.n	8002626 <HCD_HC_OUT_IRQHandler+0x19a>
    hhcd->hc[ch_num].state = HC_NYET;
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	335d      	adds	r3, #93	; 0x5d
 80025b4:	2204      	movs	r2, #4
 80025b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	333d      	adds	r3, #61	; 0x3d
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	3358      	adds	r3, #88	; 0x58
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	4619      	mov	r1, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fd40 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	2340      	movs	r3, #64	; 0x40
 8002622:	6093      	str	r3, [r2, #8]
}
 8002624:	e2ad      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263c:	d123      	bne.n	8002686 <HCD_HC_OUT_IRQHandler+0x1fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	4619      	mov	r1, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f002 fd11 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002682:	6093      	str	r3, [r2, #8]
}
 8002684:	e27d      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d136      	bne.n	800270a <HCD_HC_OUT_IRQHandler+0x27e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	3358      	adds	r3, #88	; 0x58
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	4619      	mov	r1, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fcd8 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	335d      	adds	r3, #93	; 0x5d
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
}
 8002708:	e23b      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d12c      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	2308      	movs	r3, #8
 8002730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	4619      	mov	r1, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f043 0302 	orr.w	r3, r3, #2
 8002752:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f002 fc97 	bl	8005092 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	335d      	adds	r3, #93	; 0x5d
 8002774:	2205      	movs	r2, #5
 8002776:	701a      	strb	r2, [r3, #0]
}
 8002778:	e203      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b10      	cmp	r3, #16
 800278e:	d156      	bne.n	800283e <HCD_HC_OUT_IRQHandler+0x3b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	3358      	adds	r3, #88	; 0x58
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	335d      	adds	r3, #93	; 0x5d
 80027b4:	2203      	movs	r2, #3
 80027b6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	333d      	adds	r3, #61	; 0x3d
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <HCD_HC_OUT_IRQHandler+0x36c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	333c      	adds	r3, #60	; 0x3c
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HCD_HC_OUT_IRQHandler+0x36c>
        hhcd->hc[ch_num].do_ping = 1U;
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	333d      	adds	r3, #61	; 0x3d
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	4619      	mov	r1, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fc34 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	461a      	mov	r2, r3
 8002838:	2310      	movs	r3, #16
 800283a:	6093      	str	r3, [r2, #8]
}
 800283c:	e1a1      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d12c      	bne.n	80028ae <HCD_HC_OUT_IRQHandler+0x422>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	4619      	mov	r1, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fc06 	bl	8005092 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	335d      	adds	r3, #93	; 0x5d
 8002896:	2206      	movs	r2, #6
 8002898:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	6093      	str	r3, [r2, #8]
}
 80028ac:	e169      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c4:	d136      	bne.n	8002934 <HCD_HC_OUT_IRQHandler+0x4a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	4619      	mov	r1, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 fbcd 	bl	8005092 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	335d      	adds	r3, #93	; 0x5d
 800292e:	2208      	movs	r2, #8
 8002930:	701a      	strb	r2, [r3, #0]
}
 8002932:	e126      	b.n	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	f040 811b 	bne.w	8002b82 <HCD_HC_OUT_IRQHandler+0x6f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	4619      	mov	r1, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f023 0302 	bic.w	r3, r3, #2
 800296c:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335d      	adds	r3, #93	; 0x5d
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d137      	bne.n	80029f4 <HCD_HC_OUT_IRQHandler+0x568>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	333f      	adds	r3, #63	; 0x3f
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d00b      	beq.n	80029c6 <HCD_HC_OUT_IRQHandler+0x53a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	333f      	adds	r3, #63	; 0x3f
 80029be:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	f040 80c5 	bne.w	8002b50 <HCD_HC_OUT_IRQHandler+0x6c4>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	3351      	adds	r3, #81	; 0x51
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f083 0301 	eor.w	r3, r3, #1
 80029dc:	b2d8      	uxtb	r0, r3
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	3351      	adds	r3, #81	; 0x51
 80029ee:	4602      	mov	r2, r0
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e0ad      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	335d      	adds	r3, #93	; 0x5d
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d10a      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x594>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	335c      	adds	r3, #92	; 0x5c
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e097      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	335d      	adds	r3, #93	; 0x5d
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d10a      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x5c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	335c      	adds	r3, #92	; 0x5c
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e081      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	335d      	adds	r3, #93	; 0x5d
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10a      	bne.n	8002a78 <HCD_HC_OUT_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	335c      	adds	r3, #92	; 0x5c
 8002a72:	2205      	movs	r2, #5
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e06b      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	335d      	adds	r3, #93	; 0x5d
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d00a      	beq.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x618>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	335d      	adds	r3, #93	; 0x5d
 8002a9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d155      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3358      	adds	r3, #88	; 0x58
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4403      	add	r3, r0
 8002ac6:	3358      	adds	r3, #88	; 0x58
 8002ac8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3358      	adds	r3, #88	; 0x58
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d914      	bls.n	8002b0a <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3358      	adds	r3, #88	; 0x58
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	335c      	adds	r3, #92	; 0x5c
 8002b04:	2204      	movs	r2, #4
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e009      	b.n	8002b1e <HCD_HC_OUT_IRQHandler+0x692>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	335c      	adds	r3, #92	; 0x5c
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b34:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b3c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2302      	movs	r3, #2
 8002b60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	b2d8      	uxtb	r0, r3
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	335c      	adds	r3, #92	; 0x5c
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f004 fc37 	bl	80073f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	0c5b      	lsrs	r3, r3, #17
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d003      	beq.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x44>
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	f000 8082 	beq.w	8002cd2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bce:	e083      	b.n	8002cd8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07f      	beq.n	8002cd6 <HCD_RXQLVL_IRQHandler+0x14a>
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3344      	adds	r3, #68	; 0x44
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d074      	beq.n	8002cd6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3344      	adds	r3, #68	; 0x44
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	b292      	uxth	r2, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f001 fdcf 	bl	80047aa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3344      	adds	r3, #68	; 0x44
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	18d1      	adds	r1, r2, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4403      	add	r3, r0
 8002c30:	3344      	adds	r3, #68	; 0x44
 8002c32:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	334c      	adds	r3, #76	; 0x4c
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	18d1      	adds	r1, r2, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4403      	add	r3, r0
 8002c58:	334c      	adds	r3, #76	; 0x4c
 8002c5a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HCD_RXQLVL_IRQHandler+0x154>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d031      	beq.n	8002cd6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c88:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3350      	adds	r3, #80	; 0x50
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f083 0301 	eor.w	r3, r3, #1
 8002cba:	b2d8      	uxtb	r0, r3
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	3350      	adds	r3, #80	; 0x50
 8002ccc:	4602      	mov	r2, r0
 8002cce:	701a      	strb	r2, [r3, #0]
      break;
 8002cd0:	e001      	b.n	8002cd6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002cd6:	bf00      	nop
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3728      	adds	r7, #40	; 0x28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	1ff80000 	.word	0x1ff80000

08002ce4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d10b      	bne.n	8002d34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f004 fb46 	bl	80073b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d132      	bne.n	8002da4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d126      	bne.n	8002d9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d113      	bne.n	8002d80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d62:	d106      	bne.n	8002d72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 fe5a 	bl	8004a24 <USB_InitFSLSPClkSel>
 8002d70:	e011      	b.n	8002d96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fe53 	bl	8004a24 <USB_InitFSLSPClkSel>
 8002d7e:	e00a      	b.n	8002d96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f004 fb38 	bl	800740c <HAL_HCD_PortEnabled_Callback>
 8002d9c:	e002      	b.n	8002da4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f004 fb42 	bl	8007428 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d103      	bne.n	8002db6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f043 0320 	orr.w	r3, r3, #32
 8002db4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e11f      	b.n	800301e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fc9c 	bl	8000730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e30:	f001 f9dc 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8002e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a7b      	ldr	r2, [pc, #492]	; (8003028 <HAL_I2C_Init+0x25c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d807      	bhi.n	8002e50 <HAL_I2C_Init+0x84>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_I2C_Init+0x260>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e006      	b.n	8002e5e <HAL_I2C_Init+0x92>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a77      	ldr	r2, [pc, #476]	; (8003030 <HAL_I2C_Init+0x264>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0db      	b.n	800301e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a72      	ldr	r2, [pc, #456]	; (8003034 <HAL_I2C_Init+0x268>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9b      	lsrs	r3, r3, #18
 8002e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	6852      	ldr	r2, [r2, #4]
 8002e7c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4863      	ldr	r0, [pc, #396]	; (8003028 <HAL_I2C_Init+0x25c>)
 8002e9a:	4283      	cmp	r3, r0
 8002e9c:	d802      	bhi.n	8002ea4 <HAL_I2C_Init+0xd8>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e009      	b.n	8002eb8 <HAL_I2C_Init+0xec>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002eaa:	fb00 f303 	mul.w	r3, r0, r3
 8002eae:	4862      	ldr	r0, [pc, #392]	; (8003038 <HAL_I2C_Init+0x26c>)
 8002eb0:	fba0 0303 	umull	r0, r3, r0, r3
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4955      	ldr	r1, [pc, #340]	; (8003028 <HAL_I2C_Init+0x25c>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d80d      	bhi.n	8002ef4 <HAL_I2C_Init+0x128>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e59      	subs	r1, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	bf38      	it	cc
 8002ef0:	2304      	movcc	r3, #4
 8002ef2:	e04f      	b.n	8002f94 <HAL_I2C_Init+0x1c8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <HAL_I2C_Init+0x154>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e5c      	subs	r4, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e012      	b.n	8002f46 <HAL_I2C_Init+0x17a>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e5c      	subs	r4, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x182>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e022      	b.n	8002f94 <HAL_I2C_Init+0x1c8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10e      	bne.n	8002f74 <HAL_I2C_Init+0x1a8>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e5c      	subs	r4, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	440b      	add	r3, r1
 8002f64:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f72:	e00f      	b.n	8002f94 <HAL_I2C_Init+0x1c8>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e5c      	subs	r4, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	69d0      	ldr	r0, [r2, #28]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6a12      	ldr	r2, [r2, #32]
 8002fae:	4302      	orrs	r2, r0
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	6908      	ldr	r0, [r1, #16]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68c9      	ldr	r1, [r1, #12]
 8002fce:	4301      	orrs	r1, r0
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6950      	ldr	r0, [r2, #20]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6992      	ldr	r2, [r2, #24]
 8002fea:	4302      	orrs	r2, r0
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e127      	b.n	800329e <HAL_I2S_Init+0x262>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a90      	ldr	r2, [pc, #576]	; (80032a8 <HAL_I2S_Init+0x26c>)
 8003066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd fbd9 	bl	8000820 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2202      	movs	r2, #2
 8003090:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d060      	beq.n	800315c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030a2:	2310      	movs	r3, #16
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e001      	b.n	80030ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d802      	bhi.n	80030ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f001 f98c 	bl	80043d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80030c0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ca:	d125      	bne.n	8003118 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	fbb2 f2f3 	udiv	r2, r2, r3
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	3305      	adds	r3, #5
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e01f      	b.n	8003136 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	3305      	adds	r3, #5
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	e00e      	b.n	8003136 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	3305      	adds	r3, #5
 8003134:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <HAL_I2S_Init+0x270>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e003      	b.n	8003164 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800315c:	2302      	movs	r3, #2
 800315e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d902      	bls.n	8003170 <HAL_I2S_Init+0x134>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2bff      	cmp	r3, #255	; 0xff
 800316e:	d907      	bls.n	8003180 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	f043 0210 	orr.w	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e08e      	b.n	800329e <HAL_I2S_Init+0x262>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6911      	ldr	r1, [r2, #16]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4311      	orrs	r1, r2
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	430a      	orrs	r2, r1
 8003190:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031a0:	f023 030f 	bic.w	r3, r3, #15
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	6848      	ldr	r0, [r1, #4]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	6889      	ldr	r1, [r1, #8]
 80031ac:	4308      	orrs	r0, r1
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68c9      	ldr	r1, [r1, #12]
 80031b2:	4308      	orrs	r0, r1
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	6989      	ldr	r1, [r1, #24]
 80031b8:	4301      	orrs	r1, r0
 80031ba:	430b      	orrs	r3, r1
 80031bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031c0:	61d3      	str	r3, [r2, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d161      	bne.n	800328e <HAL_I2S_Init+0x252>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a38      	ldr	r2, [pc, #224]	; (80032b0 <HAL_I2S_Init+0x274>)
 80031ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a37      	ldr	r2, [pc, #220]	; (80032b4 <HAL_I2S_Init+0x278>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_I2S_Init+0x1a2>
 80031da:	4a37      	ldr	r2, [pc, #220]	; (80032b8 <HAL_I2S_Init+0x27c>)
 80031dc:	e001      	b.n	80031e2 <HAL_I2S_Init+0x1a6>
 80031de:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4933      	ldr	r1, [pc, #204]	; (80032b4 <HAL_I2S_Init+0x278>)
 80031e8:	428b      	cmp	r3, r1
 80031ea:	d101      	bne.n	80031f0 <HAL_I2S_Init+0x1b4>
 80031ec:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_I2S_Init+0x27c>)
 80031ee:	e001      	b.n	80031f4 <HAL_I2S_Init+0x1b8>
 80031f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031fa:	f023 030f 	bic.w	r3, r3, #15
 80031fe:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <HAL_I2S_Init+0x278>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_I2S_Init+0x1d2>
 800320a:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_I2S_Init+0x27c>)
 800320c:	e001      	b.n	8003212 <HAL_I2S_Init+0x1d6>
 800320e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003212:	2202      	movs	r2, #2
 8003214:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_I2S_Init+0x278>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_I2S_Init+0x1e8>
 8003220:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_I2S_Init+0x27c>)
 8003222:	e001      	b.n	8003228 <HAL_I2S_Init+0x1ec>
 8003224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003234:	d003      	beq.n	800323e <HAL_I2S_Init+0x202>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_I2S_Init+0x20a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800323e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e001      	b.n	800324a <HAL_I2S_Init+0x20e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	b299      	uxth	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003260:	4303      	orrs	r3, r0
 8003262:	b29b      	uxth	r3, r3
 8003264:	430b      	orrs	r3, r1
 8003266:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003268:	4313      	orrs	r3, r2
 800326a:	b29a      	uxth	r2, r3
 800326c:	897b      	ldrh	r3, [r7, #10]
 800326e:	4313      	orrs	r3, r2
 8003270:	b29b      	uxth	r3, r3
 8003272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003276:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <HAL_I2S_Init+0x278>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_I2S_Init+0x24a>
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_I2S_Init+0x27c>)
 8003284:	e001      	b.n	800328a <HAL_I2S_Init+0x24e>
 8003286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800328a:	897a      	ldrh	r2, [r7, #10]
 800328c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	080033b3 	.word	0x080033b3
 80032ac:	cccccccd 	.word	0xcccccccd
 80032b0:	080034c9 	.word	0x080034c9
 80032b4:	40003800 	.word	0x40003800
 80032b8:	40003400 	.word	0x40003400

080032bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003308:	8812      	ldrh	r2, [r2, #0]
 800330a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10e      	bne.n	800334c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800333c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffb8 	bl	80032bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	b292      	uxth	r2, r2
 8003368:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	1c9a      	adds	r2, r3, #2
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10e      	bne.n	80033aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	6852      	ldr	r2, [r2, #4]
 8003396:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800339a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff93 	bl	80032d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d13a      	bne.n	8003444 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d109      	bne.n	80033ec <I2S_IRQHandler+0x3a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d102      	bne.n	80033ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffb4 	bl	8003354 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d126      	bne.n	8003444 <I2S_IRQHandler+0x92>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b20      	cmp	r3, #32
 8003402:	d11f      	bne.n	8003444 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	6852      	ldr	r2, [r2, #4]
 800340e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003412:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff50 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d136      	bne.n	80034be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d109      	bne.n	800346e <I2S_IRQHandler+0xbc>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d102      	bne.n	800346e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff45 	bl	80032f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b08      	cmp	r3, #8
 8003476:	d122      	bne.n	80034be <I2S_IRQHandler+0x10c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b20      	cmp	r3, #32
 8003484:	d11b      	bne.n	80034be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	6852      	ldr	r2, [r2, #4]
 8003490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003494:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff13 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4aa2      	ldr	r2, [pc, #648]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034e2:	4ba2      	ldr	r3, [pc, #648]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034e4:	e001      	b.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a9b      	ldr	r2, [pc, #620]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003500:	4b9a      	ldr	r3, [pc, #616]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003502:	e001      	b.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d004      	beq.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 8099 	bne.w	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f925 	bl	8003784 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9c6 	bl	80038e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d13a      	bne.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d035      	beq.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a7e      	ldr	r2, [pc, #504]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003572:	4b7e      	ldr	r3, [pc, #504]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	497a      	ldr	r1, [pc, #488]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003580:	428a      	cmp	r2, r1
 8003582:	d101      	bne.n	8003588 <HAL_I2SEx_FullDuplex_IRQHandler+0xc0>
 8003584:	4a79      	ldr	r2, [pc, #484]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003586:	e001      	b.n	800358c <HAL_I2SEx_FullDuplex_IRQHandler+0xc4>
 8003588:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800358c:	6852      	ldr	r2, [r2, #4]
 800358e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003592:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	6852      	ldr	r2, [r2, #4]
 800359e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f043 0202 	orr.w	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fe88 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	f040 80be 	bne.w	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80b8 	beq.w	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	6852      	ldr	r2, [r2, #4]
 80035f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a59      	ldr	r2, [pc, #356]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003606:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	4955      	ldr	r1, [pc, #340]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003614:	428a      	cmp	r2, r1
 8003616:	d101      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8003618:	4a54      	ldr	r2, [pc, #336]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800361a:	e001      	b.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x158>
 800361c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003620:	6852      	ldr	r2, [r2, #4]
 8003622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003626:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f043 0204 	orr.w	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fe4a 	bl	80032e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003650:	e084      	b.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d107      	bne.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8be 	bl	80037e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f8fb 	bl	800387c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d12f      	bne.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02a      	beq.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6852      	ldr	r2, [r2, #4]
 80036a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2e      	ldr	r2, [pc, #184]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036b4:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036b6:	e001      	b.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	4929      	ldr	r1, [pc, #164]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036c2:	428a      	cmp	r2, r1
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
 80036c6:	4a29      	ldr	r2, [pc, #164]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x206>
 80036ca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036ce:	6852      	ldr	r2, [r2, #4]
 80036d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fdfa 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d131      	bne.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02c      	beq.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800370e:	4b17      	ldr	r3, [pc, #92]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003710:	e001      	b.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	4913      	ldr	r1, [pc, #76]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800371c:	428a      	cmp	r2, r1
 800371e:	d101      	bne.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>
 8003720:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003722:	e001      	b.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>
 8003724:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003728:	6852      	ldr	r2, [r2, #4]
 800372a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800372e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	6852      	ldr	r2, [r2, #4]
 800373a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fdc5 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800375a:	e000      	b.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375c:	bf00      	nop
}
 800375e:	bf00      	nop
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40003800 	.word	0x40003800
 800376c:	40003400 	.word	0x40003400

08003770 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c98      	adds	r0, r3, #2
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	6248      	str	r0, [r1, #36]	; 0x24
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d113      	bne.n	80037de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	6852      	ldr	r2, [r2, #4]
 80037c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ffc9 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <I2SEx_TxISR_I2SExt+0x8c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <I2SEx_TxISR_I2SExt+0x16>
 80037fa:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <I2SEx_TxISR_I2SExt+0x90>)
 80037fc:	e001      	b.n	8003802 <I2SEx_TxISR_I2SExt+0x1a>
 80037fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c98      	adds	r0, r3, #2
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6248      	str	r0, [r1, #36]	; 0x24
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d121      	bne.n	800386c <I2SEx_TxISR_I2SExt+0x84>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a11      	ldr	r2, [pc, #68]	; (8003874 <I2SEx_TxISR_I2SExt+0x8c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <I2SEx_TxISR_I2SExt+0x4e>
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <I2SEx_TxISR_I2SExt+0x90>)
 8003834:	e001      	b.n	800383a <I2SEx_TxISR_I2SExt+0x52>
 8003836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	490d      	ldr	r1, [pc, #52]	; (8003874 <I2SEx_TxISR_I2SExt+0x8c>)
 8003840:	428a      	cmp	r2, r1
 8003842:	d101      	bne.n	8003848 <I2SEx_TxISR_I2SExt+0x60>
 8003844:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <I2SEx_TxISR_I2SExt+0x90>)
 8003846:	e001      	b.n	800384c <I2SEx_TxISR_I2SExt+0x64>
 8003848:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800384c:	6852      	ldr	r2, [r2, #4]
 800384e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003852:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <I2SEx_TxISR_I2SExt+0x84>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff82 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40003800 	.word	0x40003800
 8003878:	40003400 	.word	0x40003400

0800387c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	1c99      	adds	r1, r3, #2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	68d2      	ldr	r2, [r2, #12]
 8003894:	b292      	uxth	r2, r2
 8003896:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d113      	bne.n	80038d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff4c 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	1c99      	adds	r1, r3, #2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	491e      	ldr	r1, [pc, #120]	; (8003970 <I2SEx_RxISR_I2SExt+0x90>)
 80038f8:	428a      	cmp	r2, r1
 80038fa:	d101      	bne.n	8003900 <I2SEx_RxISR_I2SExt+0x20>
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <I2SEx_RxISR_I2SExt+0x94>)
 80038fe:	e001      	b.n	8003904 <I2SEx_RxISR_I2SExt+0x24>
 8003900:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003904:	68d2      	ldr	r2, [r2, #12]
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d121      	bne.n	8003966 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <I2SEx_RxISR_I2SExt+0x90>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <I2SEx_RxISR_I2SExt+0x50>
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <I2SEx_RxISR_I2SExt+0x94>)
 800392e:	e001      	b.n	8003934 <I2SEx_RxISR_I2SExt+0x54>
 8003930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	490d      	ldr	r1, [pc, #52]	; (8003970 <I2SEx_RxISR_I2SExt+0x90>)
 800393a:	428a      	cmp	r2, r1
 800393c:	d101      	bne.n	8003942 <I2SEx_RxISR_I2SExt+0x62>
 800393e:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <I2SEx_RxISR_I2SExt+0x94>)
 8003940:	e001      	b.n	8003946 <I2SEx_RxISR_I2SExt+0x66>
 8003942:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003946:	6852      	ldr	r2, [r2, #4]
 8003948:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800394c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff05 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40003800 	.word	0x40003800
 8003974:	40003400 	.word	0x40003400

08003978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e25b      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003996:	4ba3      	ldr	r3, [pc, #652]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d00c      	beq.n	80039bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4ba0      	ldr	r3, [pc, #640]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d112      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ae:	4b9d      	ldr	r3, [pc, #628]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	4b99      	ldr	r3, [pc, #612]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x108>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d157      	bne.n	8003a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e236      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x74>
 80039de:	4a91      	ldr	r2, [pc, #580]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	4b90      	ldr	r3, [pc, #576]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4a8b      	ldr	r2, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	4b8a      	ldr	r3, [pc, #552]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4a88      	ldr	r2, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	4b87      	ldr	r3, [pc, #540]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 8003a10:	4a84      	ldr	r2, [pc, #528]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	4b84      	ldr	r3, [pc, #528]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4a81      	ldr	r2, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a1e:	4b81      	ldr	r3, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd f9d4 	bl	8000ddc <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd f9d0 	bl	8000ddc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1fb      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd f9c0 	bl	8000ddc <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd f9bc 	bl	8000ddc <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1e7      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0xe8>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d063      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8e:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b62      	ldr	r3, [pc, #392]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d11c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa6:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d116      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	4b5c      	ldr	r3, [pc, #368]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1bb      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4956      	ldr	r1, [pc, #344]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	4b55      	ldr	r3, [pc, #340]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	e03a      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <HAL_RCC_OscConfig+0x2b0>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd f975 	bl	8000ddc <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fd f971 	bl	8000ddc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e19c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4943      	ldr	r1, [pc, #268]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	; (8003c28 <HAL_RCC_OscConfig+0x2b0>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd f954 	bl	8000ddc <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fd f950 	bl	8000ddc <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e17b      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d030      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_RCC_OscConfig+0x2b4>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd f934 	bl	8000ddc <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fd f930 	bl	8000ddc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e15b      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x200>
 8003b96:	e015      	b.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x2b4>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd f91d 	bl	8000ddc <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fd f919 	bl	8000ddc <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e144      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a0 	beq.w	8003d12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_OscConfig+0x2b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d121      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <HAL_RCC_OscConfig+0x2b8>)
 8003c10:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <HAL_RCC_OscConfig+0x2b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd f8df 	bl	8000ddc <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e011      	b.n	8003c46 <HAL_RCC_OscConfig+0x2ce>
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	42470000 	.word	0x42470000
 8003c2c:	42470e80 	.word	0x42470e80
 8003c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c34:	f7fd f8d2 	bl	8000ddc <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e0fd      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b81      	ldr	r3, [pc, #516]	; (8003e4c <HAL_RCC_OscConfig+0x4d4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
 8003c5a:	4a7d      	ldr	r2, [pc, #500]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	4b7c      	ldr	r3, [pc, #496]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	e01c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x32a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCC_OscConfig+0x312>
 8003c70:	4a77      	ldr	r2, [pc, #476]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c72:	4b77      	ldr	r3, [pc, #476]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7c:	4a74      	ldr	r2, [pc, #464]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	4b74      	ldr	r3, [pc, #464]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	e00b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x32a>
 8003c8a:	4a71      	ldr	r2, [pc, #452]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c8c:	4b70      	ldr	r3, [pc, #448]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	4a6e      	ldr	r2, [pc, #440]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c98:	4b6d      	ldr	r3, [pc, #436]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d015      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd f897 	bl	8000ddc <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd f893 	bl	8000ddc <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0bc      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ee      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x33a>
 8003cd4:	e014      	b.n	8003d00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd f881 	bl	8000ddc <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cde:	f7fd f87d 	bl	8000ddc <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e0a6      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf4:	4b56      	ldr	r3, [pc, #344]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ee      	bne.n	8003cde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d105      	bne.n	8003d12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d06:	4a52      	ldr	r2, [pc, #328]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8092 	beq.w	8003e40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d05c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d141      	bne.n	8003db4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d30:	4b48      	ldr	r3, [pc, #288]	; (8003e54 <HAL_RCC_OscConfig+0x4dc>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd f851 	bl	8000ddc <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd f84d 	bl	8000ddc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e078      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d50:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5c:	493c      	ldr	r1, [pc, #240]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <HAL_RCC_OscConfig+0x4dc>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f826 	bl	8000ddc <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fd f822 	bl	8000ddc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04d      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x41c>
 8003db2:	e045      	b.n	8003e40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <HAL_RCC_OscConfig+0x4dc>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fd f80f 	bl	8000ddc <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd f80b 	bl	8000ddc <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e036      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x44a>
 8003de0:	e02e      	b.n	8003e40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e029      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dee:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <HAL_RCC_OscConfig+0x4d8>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d11c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d115      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	40023800 	.word	0x40023800
 8003e54:	42470060 	.word	0x42470060

08003e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0cc      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b68      	ldr	r3, [pc, #416]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 020f 	and.w	r2, r3, #15
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d20c      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4a59      	ldr	r2, [pc, #356]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec4:	4a53      	ldr	r2, [pc, #332]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4950      	ldr	r1, [pc, #320]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d044      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e067      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f36:	4937      	ldr	r1, [pc, #220]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	4b36      	ldr	r3, [pc, #216]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 0203 	bic.w	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f48:	f7fc ff48 	bl	8000ddc <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fc ff44 	bl	8000ddc <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e04f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 020c 	and.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1eb      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d90c      	bls.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 020f 	and.w	r2, r3, #15
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4919      	ldr	r1, [pc, #100]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fca:	4912      	ldr	r1, [pc, #72]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f821 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	5cd3      	ldrb	r3, [r2, r3]
 8003ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ff6:	4a09      	ldr	r2, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc fea8 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023c00 	.word	0x40023c00
 8004014:	40023800 	.word	0x40023800
 8004018:	08007a9c 	.word	0x08007a9c
 800401c:	20000000 	.word	0x20000000
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	b08f      	sub	sp, #60	; 0x3c
 800402a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004030:	2300      	movs	r3, #0
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403c:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b04      	cmp	r3, #4
 8004046:	d007      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x34>
 8004048:	2b08      	cmp	r3, #8
 800404a:	d008      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x3a>
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 80b2 	bne.w	80041b6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004052:	4b5e      	ldr	r3, [pc, #376]	; (80041cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004056:	e0b1      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004058:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800405a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800405c:	e0ae      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800405e:	4b5a      	ldr	r3, [pc, #360]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004068:	4b57      	ldr	r3, [pc, #348]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d04e      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004074:	4b54      	ldr	r3, [pc, #336]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	f04f 0400 	mov.w	r4, #0
 800407e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	ea01 0103 	and.w	r1, r1, r3
 800408a:	ea02 0204 	and.w	r2, r2, r4
 800408e:	460b      	mov	r3, r1
 8004090:	4614      	mov	r4, r2
 8004092:	0160      	lsls	r0, r4, #5
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
 8004096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004098:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800409c:	6278      	str	r0, [r7, #36]	; 0x24
 800409e:	015b      	lsls	r3, r3, #5
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80040a6:	1a5b      	subs	r3, r3, r1
 80040a8:	eb64 0402 	sbc.w	r4, r4, r2
 80040ac:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80040b0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80040b4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80040b8:	ebb8 0803 	subs.w	r8, r8, r3
 80040bc:	eb69 0904 	sbc.w	r9, r9, r4
 80040c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80040d8:	eb18 0801 	adds.w	r8, r8, r1
 80040dc:	eb49 0902 	adc.w	r9, r9, r2
 80040e0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80040f8:	4640      	mov	r0, r8
 80040fa:	4649      	mov	r1, r9
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	461a      	mov	r2, r3
 8004104:	4623      	mov	r3, r4
 8004106:	f7fc f85f 	bl	80001c8 <__aeabi_uldivmod>
 800410a:	4603      	mov	r3, r0
 800410c:	460c      	mov	r4, r1
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
 8004110:	e043      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004112:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	f04f 0400 	mov.w	r4, #0
 800411c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	ea01 0103 	and.w	r1, r1, r3
 8004128:	ea02 0204 	and.w	r2, r2, r4
 800412c:	460b      	mov	r3, r1
 800412e:	4614      	mov	r4, r2
 8004130:	0160      	lsls	r0, r4, #5
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	015b      	lsls	r3, r3, #5
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004144:	1a5b      	subs	r3, r3, r1
 8004146:	eb64 0402 	sbc.w	r4, r4, r2
 800414a:	01a6      	lsls	r6, r4, #6
 800414c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8004150:	019d      	lsls	r5, r3, #6
 8004152:	1aed      	subs	r5, r5, r3
 8004154:	eb66 0604 	sbc.w	r6, r6, r4
 8004158:	00f3      	lsls	r3, r6, #3
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	00eb      	lsls	r3, r5, #3
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	e897 0060 	ldmia.w	r7, {r5, r6}
 800416c:	186d      	adds	r5, r5, r1
 800416e:	eb46 0602 	adc.w	r6, r6, r2
 8004172:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004176:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800417a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800417e:	4655      	mov	r5, sl
 8004180:	465e      	mov	r6, fp
 8004182:	4628      	mov	r0, r5
 8004184:	4631      	mov	r1, r6
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	461a      	mov	r2, r3
 800418e:	4623      	mov	r3, r4
 8004190:	f7fc f81a 	bl	80001c8 <__aeabi_uldivmod>
 8004194:	4603      	mov	r3, r0
 8004196:	460c      	mov	r4, r1
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	3301      	adds	r3, #1
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80041aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041b4:	e002      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041be:	4618      	mov	r0, r3
 80041c0:	373c      	adds	r7, #60	; 0x3c
 80041c2:	46bd      	mov	sp, r7
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	007a1200 	.word	0x007a1200

080041d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000000 	.word	0x20000000

080041ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041f0:	f7ff fff0 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 80041f4:	4601      	mov	r1, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0a9b      	lsrs	r3, r3, #10
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	08007aac 	.word	0x08007aac

08004214 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004238:	2b00      	cmp	r3, #0
 800423a:	d035      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800423c:	4b62      	ldr	r3, [pc, #392]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004242:	f7fc fdcb 	bl	8000ddc <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004248:	e008      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800424a:	f7fc fdc7 	bl	8000ddc <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0b0      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800425c:	4b5b      	ldr	r3, [pc, #364]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004268:	4958      	ldr	r1, [pc, #352]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	019a      	lsls	r2, r3, #6
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800427c:	4b52      	ldr	r3, [pc, #328]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004282:	f7fc fdab 	bl	8000ddc <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004288:	e008      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800428a:	f7fc fda7 	bl	8000ddc <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e090      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800429c:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8083 	beq.w	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	4a44      	ldr	r2, [pc, #272]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	4b43      	ldr	r3, [pc, #268]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6413      	str	r3, [r2, #64]	; 0x40
 80042c6:	4b41      	ldr	r3, [pc, #260]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042d2:	4a3f      	ldr	r2, [pc, #252]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042d4:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042de:	f7fc fd7d 	bl	8000ddc <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042e6:	f7fc fd79 	bl	8000ddc <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e062      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004304:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	429a      	cmp	r2, r3
 8004320:	d028      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004332:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004338:	4a24      	ldr	r2, [pc, #144]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800433e:	4b23      	ldr	r3, [pc, #140]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d114      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800434a:	f7fc fd47 	bl	8000ddc <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	e00a      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004352:	f7fc fd43 	bl	8000ddc <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e02a      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0ee      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004380:	d10d      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004382:	4912      	ldr	r1, [pc, #72]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004398:	4313      	orrs	r3, r2
 800439a:	608b      	str	r3, [r1, #8]
 800439c:	e005      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043a8:	6093      	str	r3, [r2, #8]
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	4313      	orrs	r3, r2
 80043ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	42470068 	.word	0x42470068
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40007000 	.word	0x40007000
 80043d4:	42470e40 	.word	0x42470e40

080043d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d13d      	bne.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043f6:	4b22      	ldr	r3, [pc, #136]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043fe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004406:	2b01      	cmp	r3, #1
 8004408:	d12f      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800440c:	617b      	str	r3, [r7, #20]
          break;
 800440e:	e02f      	b.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441c:	d108      	bne.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004426:	4a18      	ldr	r2, [pc, #96]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e007      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004430:	4b13      	ldr	r3, [pc, #76]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004438:	4a14      	ldr	r2, [pc, #80]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445a:	0f1b      	lsrs	r3, r3, #28
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	617b      	str	r3, [r7, #20]
          break;
 8004468:	e002      	b.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
          break;
 800446e:	bf00      	nop
        }
      }
      break;
 8004470:	bf00      	nop
    }
  }
  return frequency;
 8004472:	697b      	ldr	r3, [r7, #20]
}
 8004474:	4618      	mov	r0, r3
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40023800 	.word	0x40023800
 8004484:	00bb8000 	.word	0x00bb8000
 8004488:	007a1200 	.word	0x007a1200
 800448c:	00f42400 	.word	0x00f42400

08004490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e055      	b.n	800454e <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc fb3d 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6851      	ldr	r1, [r2, #4]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6892      	ldr	r2, [r2, #8]
 80044e6:	4311      	orrs	r1, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68d2      	ldr	r2, [r2, #12]
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6912      	ldr	r2, [r2, #16]
 80044f2:	4311      	orrs	r1, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6952      	ldr	r2, [r2, #20]
 80044f8:	4311      	orrs	r1, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6992      	ldr	r2, [r2, #24]
 80044fe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	69d2      	ldr	r2, [r2, #28]
 8004508:	4311      	orrs	r1, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6a12      	ldr	r2, [r2, #32]
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6992      	ldr	r2, [r2, #24]
 8004520:	0c12      	lsrs	r2, r2, #16
 8004522:	f002 0104 	and.w	r1, r2, #4
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	69d2      	ldr	r2, [r2, #28]
 8004538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004556:	b084      	sub	sp, #16
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	f107 001c 	add.w	r0, r7, #28
 8004564:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2b01      	cmp	r3, #1
 800456c:	d122      	bne.n	80045b4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f949 	bl	8004840 <USB_CoreReset>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]
 80045b2:	e01a      	b.n	80045ea <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f93d 	bl	8004840 <USB_CoreReset>
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
 80045dc:	e005      	b.n	80045ea <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10b      	bne.n	8004608 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f043 0206 	orr.w	r2, r3, #6
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004614:	b004      	add	sp, #16
 8004616:	4770      	bx	lr

08004618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f043 0201 	orr.w	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d106      	bne.n	8004688 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	e00b      	b.n	80046a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	e001      	b.n	80046a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e003      	b.n	80046a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046a0:	2032      	movs	r0, #50	; 0x32
 80046a2:	f7fc fba7 	bl	8000df4 <HAL_Delay>

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	019b      	lsls	r3, r3, #6
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <USB_FlushTxFifo+0x48>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e006      	b.n	80046ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d0f0      	beq.n	80046ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	00030d40 	.word	0x00030d40

080046fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2210      	movs	r2, #16
 800470c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a09      	ldr	r2, [pc, #36]	; (800473c <USB_FlushRxFifo+0x40>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e006      	b.n	800472e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b10      	cmp	r3, #16
 800472a:	d0f0      	beq.n	800470e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	00030d40 	.word	0x00030d40

08004740 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4611      	mov	r1, r2
 800474c:	461a      	mov	r2, r3
 800474e:	460b      	mov	r3, r1
 8004750:	71fb      	strb	r3, [r7, #7]
 8004752:	4613      	mov	r3, r2
 8004754:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800475e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11a      	bne.n	800479c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004766:	88bb      	ldrh	r3, [r7, #4]
 8004768:	3303      	adds	r3, #3
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e00f      	b.n	8004794 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	031a      	lsls	r2, r3, #12
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004780:	461a      	mov	r2, r3
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3304      	adds	r3, #4
 800478c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3301      	adds	r3, #1
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d3eb      	bcc.n	8004774 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b089      	sub	sp, #36	; 0x24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	4613      	mov	r3, r2
 80047b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	3303      	adds	r3, #3
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e00b      	b.n	80047e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3304      	adds	r3, #4
 80047de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d3ef      	bcc.n	80047ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80047ee:	69fb      	ldr	r3, [r7, #28]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3724      	adds	r7, #36	; 0x24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004814:	68fb      	ldr	r3, [r7, #12]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0301 	and.w	r3, r3, #1
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <USB_CoreReset+0x64>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e01b      	b.n	8004896 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	daf2      	bge.n	800484c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <USB_CoreReset+0x64>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d0f0      	beq.n	8004876 <USB_CoreReset+0x36>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	00030d40 	.word	0x00030d40

080048a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a8:	b084      	sub	sp, #16
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	f107 001c 	add.w	r0, r7, #28
 80048b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048c4:	461a      	mov	r2, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10b      	bne.n	8004918 <USB_HostInit+0x70>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004906:	461a      	mov	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e016      	b.n	8004946 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800491e:	461a      	mov	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 0304 	bic.w	r3, r3, #4
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e00a      	b.n	8004946 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 0304 	bic.w	r3, r3, #4
 8004944:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004946:	2110      	movs	r1, #16
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff feb1 	bl	80046b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fed4 	bl	80046fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e015      	b.n	8004986 <USB_HostInit+0xde>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004966:	461a      	mov	r2, r3
 8004968:	f04f 33ff 	mov.w	r3, #4294967295
 800496c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497a:	461a      	mov	r2, r3
 800497c:	2300      	movs	r3, #0
 800497e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	6a3a      	ldr	r2, [r7, #32]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	429a      	cmp	r2, r3
 800498c:	d8e5      	bhi.n	800495a <USB_HostInit+0xb2>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800498e:	2101      	movs	r1, #1
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f8af 	bl	8004af4 <USB_DriveVbus>

  HAL_Delay(200U);
 8004996:	20c8      	movs	r0, #200	; 0xc8
 8004998:	f7fc fa2c 	bl	8000df4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <USB_HostInit+0x126>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <USB_HostInit+0x168>)
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <USB_HostInit+0x16c>)
 80049c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80049cc:	e009      	b.n	80049e2 <USB_HostInit+0x13a>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2280      	movs	r2, #128	; 0x80
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a10      	ldr	r2, [pc, #64]	; (8004a18 <USB_HostInit+0x170>)
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <USB_HostInit+0x174>)
 80049de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <USB_HostInit+0x14c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f043 0210 	orr.w	r2, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <USB_HostInit+0x178>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a0c:	b004      	add	sp, #16
 8004a0e:	4770      	bx	lr
 8004a10:	01000200 	.word	0x01000200
 8004a14:	00e00300 	.word	0x00e00300
 8004a18:	00600080 	.word	0x00600080
 8004a1c:	004000e0 	.word	0x004000e0
 8004a20:	a3200008 	.word	0xa3200008

08004a24 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 0303 	bic.w	r3, r3, #3
 8004a48:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a50:	4619      	mov	r1, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a70:	461a      	mov	r2, r3
 8004a72:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a76:	6053      	str	r3, [r2, #4]
 8004a78:	e009      	b.n	8004a8e <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d106      	bne.n	8004a8e <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a86:	461a      	mov	r2, r3
 8004a88:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a8c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004abc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ace:	2064      	movs	r0, #100	; 0x64
 8004ad0:	f7fc f990 	bl	8000df4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ada:	461a      	mov	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f7fc f985 	bl	8000df4 <HAL_Delay>

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <USB_DriveVbus+0x46>
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b38:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d10a      	bne.n	8004b5c <USB_DriveVbus+0x68>
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	0c5b      	lsrs	r3, r3, #17
 8004b88:	f003 0303 	and.w	r3, r3, #3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	b29b      	uxth	r3, r3
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4603      	mov	r3, r0
 8004bcc:	70fb      	strb	r3, [r7, #3]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70bb      	strb	r3, [r7, #2]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bea:	461a      	mov	r2, r3
 8004bec:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004bf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	f200 8084 	bhi.w	8004d04 <USB_HC_Init+0x148>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <USB_HC_Init+0x48>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004cc5 	.word	0x08004cc5
 8004c0c:	08004c15 	.word	0x08004c15
 8004c10:	08004c85 	.word	0x08004c85
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da11      	bge.n	8004c54 <USB_HC_Init+0x98>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	60cb      	str	r3, [r1, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004c52:	e05a      	b.n	8004d0a <USB_HC_Init+0x14e>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d054      	beq.n	8004d0a <USB_HC_Init+0x14e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c80:	60cb      	str	r3, [r1, #12]
      break;
 8004c82:	e042      	b.n	8004d0a <USB_HC_Init+0x14e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	461a      	mov	r2, r3
 8004c92:	f240 639d 	movw	r3, #1693	; 0x69d
 8004c96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	da36      	bge.n	8004d0e <USB_HC_Init+0x152>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cac:	4619      	mov	r1, r3
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	60cb      	str	r3, [r1, #12]
      }

      break;
 8004cc2:	e024      	b.n	8004d0e <USB_HC_Init+0x152>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f240 2325 	movw	r3, #549	; 0x225
 8004cd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004cd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da18      	bge.n	8004d12 <USB_HC_Init+0x156>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	4619      	mov	r1, r3
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d00:	60cb      	str	r3, [r1, #12]
      }
      break;
 8004d02:	e006      	b.n	8004d12 <USB_HC_Init+0x156>

    default:
      ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
      break;
 8004d08:	e004      	b.n	8004d14 <USB_HC_Init+0x158>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e002      	b.n	8004d14 <USB_HC_Init+0x158>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <USB_HC_Init+0x158>
      break;
 8004d12:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da03      	bge.n	8004d50 <USB_HC_Init+0x194>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	e001      	b.n	8004d54 <USB_HC_Init+0x198>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004d54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d103      	bne.n	8004d64 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e001      	b.n	8004d68 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d74:	4619      	mov	r1, r3
 8004d76:	787b      	ldrb	r3, [r7, #1]
 8004d78:	059b      	lsls	r3, r3, #22
 8004d7a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d7e:	78bb      	ldrb	r3, [r7, #2]
 8004d80:	02db      	lsls	r3, r3, #11
 8004d82:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d86:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d8c:	049b      	lsls	r3, r3, #18
 8004d8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d9a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004da4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004da6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d110      	bne.n	8004dd0 <USB_HC_Init+0x214>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dba:	4619      	mov	r1, r3
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dce:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop

08004de0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	; 0x30
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dfc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d029      	beq.n	8004e5e <USB_HC_StartXfer+0x7e>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	791b      	ldrb	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d125      	bne.n	8004e5e <USB_HC_StartXfer+0x7e>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <USB_HC_StartXfer+0x50>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	795b      	ldrb	r3, [r3, #5]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	4619      	mov	r1, r3
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fa3c 	bl	80052a4 <USB_DoPing>
      return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e116      	b.n	800505e <USB_HC_StartXfer+0x27e>
    }
    else if (dma == 1U)
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d113      	bne.n	8004e5e <USB_HC_StartXfer+0x7e>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e42:	4619      	mov	r1, r3
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004e56:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <USB_HC_StartXfer+0xb8>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	8912      	ldrh	r2, [r2, #8]
 8004e6e:	4413      	add	r3, r2
 8004e70:	3b01      	subs	r3, #1
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	8912      	ldrh	r2, [r2, #8]
 8004e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e7a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004e7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e7e:	8b7b      	ldrh	r3, [r7, #26]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d90b      	bls.n	8004e9c <USB_HC_StartXfer+0xbc>
    {
      num_packets = max_hc_pkt_count;
 8004e84:	8b7b      	ldrh	r3, [r7, #26]
 8004e86:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004e88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	8912      	ldrh	r2, [r2, #8]
 8004e8e:	fb02 f203 	mul.w	r2, r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	611a      	str	r2, [r3, #16]
 8004e96:	e001      	b.n	8004e9c <USB_HC_StartXfer+0xbc>
    }
  }
  else
  {
    num_packets = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	78db      	ldrb	r3, [r3, #3]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <USB_HC_StartXfer+0xd2>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	8912      	ldrh	r2, [r2, #8]
 8004eaa:	fb02 f203 	mul.w	r2, r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eca:	04d9      	lsls	r1, r3, #19
 8004ecc:	4b66      	ldr	r3, [pc, #408]	; (8005068 <USB_HC_StartXfer+0x288>)
 8004ece:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ed0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	7a9b      	ldrb	r3, [r3, #10]
 8004ed6:	075b      	lsls	r3, r3, #29
 8004ed8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004edc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ede:	6103      	str	r3, [r0, #16]

  if (dma != 0U)
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <USB_HC_StartXfer+0x11a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1e:	4619      	mov	r1, r3
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f32:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f40:	4619      	mov	r1, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	7e7b      	ldrb	r3, [r7, #25]
 8004f52:	075b      	lsls	r3, r3, #29
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a41      	ldr	r2, [pc, #260]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f68:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f6a:	4b40      	ldr	r3, [pc, #256]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f72:	4a3e      	ldr	r2, [pc, #248]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f74:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	78db      	ldrb	r3, [r3, #3]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d006      	beq.n	8004f8c <USB_HC_StartXfer+0x1ac>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f86:	4a39      	ldr	r2, [pc, #228]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e005      	b.n	8004f98 <USB_HC_StartXfer+0x1b8>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004f8c:	4b37      	ldr	r3, [pc, #220]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f94:	4a35      	ldr	r2, [pc, #212]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f96:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f98:	4b34      	ldr	r3, [pc, #208]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa0:	4a32      	ldr	r2, [pc, #200]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004fa2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	; (800506c <USB_HC_StartXfer+0x28c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d14e      	bne.n	800505c <USB_HC_StartXfer+0x27c>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	78db      	ldrb	r3, [r3, #3]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d14a      	bne.n	800505c <USB_HC_StartXfer+0x27c>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d046      	beq.n	800505c <USB_HC_StartXfer+0x27c>
    {
      switch (hc->ep_type)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	79db      	ldrb	r3, [r3, #7]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d830      	bhi.n	8005038 <USB_HC_StartXfer+0x258>
 8004fd6:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <USB_HC_StartXfer+0x1fc>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08005011 	.word	0x08005011
 8004fe4:	08004fed 	.word	0x08004fed
 8004fe8:	08005011 	.word	0x08005011
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	3303      	adds	r3, #3
 8004ff2:	089b      	lsrs	r3, r3, #2
 8004ff4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004ff6:	8afa      	ldrh	r2, [r7, #22]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d91c      	bls.n	800503c <USB_HC_StartXfer+0x25c>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	619a      	str	r2, [r3, #24]
          }
          break;
 800500e:	e015      	b.n	800503c <USB_HC_StartXfer+0x25c>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	3303      	adds	r3, #3
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800501a:	8afa      	ldrh	r2, [r7, #22]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	b29b      	uxth	r3, r3
 8005026:	429a      	cmp	r2, r3
 8005028:	d90a      	bls.n	8005040 <USB_HC_StartXfer+0x260>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	619a      	str	r2, [r3, #24]
          }
          break;
 8005036:	e003      	b.n	8005040 <USB_HC_StartXfer+0x260>

        default:
          break;
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <USB_HC_StartXfer+0x262>
          break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <USB_HC_StartXfer+0x262>
          break;
 8005040:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	785a      	ldrb	r2, [r3, #1]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	b298      	uxth	r0, r3
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	4603      	mov	r3, r0
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fb72 	bl	8004740 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	1ff80000 	.word	0x1ff80000
 800506c:	200000b0 	.word	0x200000b0

08005070 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	b29b      	uxth	r3, r3
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0c9b      	lsrs	r3, r3, #18
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <USB_HC_Halt+0x3a>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d171      	bne.n	80051b0 <USB_HC_Halt+0x11e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	4619      	mov	r1, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050ec:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d146      	bne.n	8005188 <USB_HC_Halt+0xf6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005106:	4619      	mov	r1, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511a:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4413      	add	r3, r2
 8005124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005128:	4619      	mov	r1, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800513c:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4413      	add	r3, r2
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	4619      	mov	r1, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800515e:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3301      	adds	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800516c:	d81e      	bhi.n	80051ac <USB_HC_Halt+0x11a>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005184:	d0ec      	beq.n	8005160 <USB_HC_Halt+0xce>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005186:	e086      	b.n	8005296 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	4619      	mov	r1, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a8:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051aa:	e074      	b.n	8005296 <USB_HC_Halt+0x204>
          break;
 80051ac:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051ae:	e072      	b.n	8005296 <USB_HC_Halt+0x204>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	4619      	mov	r1, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d0:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d146      	bne.n	8005270 <USB_HC_Halt+0x1de>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ee:	4619      	mov	r1, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005202:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	4619      	mov	r1, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005224:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	4619      	mov	r1, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005246:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3301      	adds	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005254:	d81e      	bhi.n	8005294 <USB_HC_Halt+0x202>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526c:	d0ec      	beq.n	8005248 <USB_HC_Halt+0x1b6>
 800526e:	e012      	b.n	8005296 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	4619      	mov	r1, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4413      	add	r3, r2
 8005286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005290:	600b      	str	r3, [r1, #0]
 8005292:	e000      	b.n	8005296 <USB_HC_Halt+0x204>
          break;
 8005294:	bf00      	nop
    }
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052b8:	2301      	movs	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	4619      	mov	r1, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	04da      	lsls	r2, r3, #19
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <USB_DoPing+0x74>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052d6:	610b      	str	r3, [r1, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f6:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	461a      	mov	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	1ff80000 	.word	0x1ff80000

0800531c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff f984 	bl	800463a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005332:	2110      	movs	r1, #16
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff f9bb 	bl	80046b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff f9de 	bl	80046fc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	e01f      	b.n	8005386 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800535c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005364:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800536c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	461a      	mov	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	3301      	adds	r3, #1
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d9dc      	bls.n	8005346 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	e034      	b.n	80053fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	461a      	mov	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3301      	adds	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d8:	d80c      	bhi.n	80053f4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f0:	d0ec      	beq.n	80053cc <USB_StopHost+0xb0>
 80053f2:	e000      	b.n	80053f6 <USB_StopHost+0xda>
        break;
 80053f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3301      	adds	r3, #1
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d9c7      	bls.n	8005392 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005408:	461a      	mov	r2, r3
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f04f 32ff 	mov.w	r2, #4294967295
 8005416:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff f8fd 	bl	8004618 <USB_EnableGlobalInt>

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af04      	add	r7, sp, #16
 800542e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005430:	2301      	movs	r3, #1
 8005432:	2202      	movs	r2, #2
 8005434:	2102      	movs	r1, #2
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fc68 	bl	8005d0c <USBH_FindInterface>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	2bff      	cmp	r3, #255	; 0xff
 8005444:	d002      	beq.n	800544c <USBH_CDC_InterfaceInit+0x24>
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d901      	bls.n	8005450 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800544c:	2302      	movs	r3, #2
 800544e:	e13d      	b.n	80056cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fc3d 	bl	8005cd4 <USBH_SelectInterface>
 800545a:	4603      	mov	r3, r0
 800545c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005464:	2302      	movs	r3, #2
 8005466:	e131      	b.n	80056cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800546e:	2050      	movs	r0, #80	; 0x50
 8005470:	f002 fa30 	bl	80078d4 <malloc>
 8005474:	4603      	mov	r3, r0
 8005476:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005488:	2302      	movs	r3, #2
 800548a:	e11f      	b.n	80056cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800548c:	2250      	movs	r2, #80	; 0x50
 800548e:	2100      	movs	r1, #0
 8005490:	68b8      	ldr	r0, [r7, #8]
 8005492:	f002 fa2f 	bl	80078f4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	211a      	movs	r1, #26
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	4413      	add	r3, r2
 80054a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	b25b      	sxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da15      	bge.n	80054da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	211a      	movs	r1, #26
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	211a      	movs	r1, #26
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fe36 	bl	8007152 <USBH_AllocPipe>
 80054e6:	4603      	mov	r3, r0
 80054e8:	461a      	mov	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	7819      	ldrb	r1, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	7858      	ldrb	r0, [r3, #1]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	8952      	ldrh	r2, [r2, #10]
 8005506:	9202      	str	r2, [sp, #8]
 8005508:	2203      	movs	r2, #3
 800550a:	9201      	str	r2, [sp, #4]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4623      	mov	r3, r4
 8005510:	4602      	mov	r2, r0
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 fdee 	bl	80070f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2200      	movs	r2, #0
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f002 f8fd 	bl	8007720 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005526:	2300      	movs	r3, #0
 8005528:	2200      	movs	r2, #0
 800552a:	210a      	movs	r1, #10
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fbed 	bl	8005d0c <USBH_FindInterface>
 8005532:	4603      	mov	r3, r0
 8005534:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	2bff      	cmp	r3, #255	; 0xff
 800553a:	d002      	beq.n	8005542 <USBH_CDC_InterfaceInit+0x11a>
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d901      	bls.n	8005546 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005542:	2302      	movs	r3, #2
 8005544:	e0c2      	b.n	80056cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	211a      	movs	r1, #26
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	4413      	add	r3, r2
 8005552:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b25b      	sxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	da16      	bge.n	800558c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	211a      	movs	r1, #26
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800556e:	781a      	ldrb	r2, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	211a      	movs	r1, #26
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	4413      	add	r3, r2
 8005580:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005584:	881a      	ldrh	r2, [r3, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	835a      	strh	r2, [r3, #26]
 800558a:	e015      	b.n	80055b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	211a      	movs	r1, #26
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	211a      	movs	r1, #26
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055b2:	881a      	ldrh	r2, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	211a      	movs	r1, #26
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	b25b      	sxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	da16      	bge.n	80055fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	211a      	movs	r1, #26
 80055d6:	fb01 f303 	mul.w	r3, r1, r3
 80055da:	4413      	add	r3, r2
 80055dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	211a      	movs	r1, #26
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80055f6:	881a      	ldrh	r2, [r3, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	835a      	strh	r2, [r3, #26]
 80055fc:	e015      	b.n	800562a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	211a      	movs	r1, #26
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	211a      	movs	r1, #26
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005624:	881a      	ldrh	r2, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	7b9b      	ldrb	r3, [r3, #14]
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 fd8e 	bl	8007152 <USBH_AllocPipe>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	7bdb      	ldrb	r3, [r3, #15]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fd84 	bl	8007152 <USBH_AllocPipe>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	7b59      	ldrb	r1, [r3, #13]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	7b98      	ldrb	r0, [r3, #14]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	8b12      	ldrh	r2, [r2, #24]
 800566a:	9202      	str	r2, [sp, #8]
 800566c:	2202      	movs	r2, #2
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	4623      	mov	r3, r4
 8005674:	4602      	mov	r2, r0
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 fd3c 	bl	80070f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	7b19      	ldrb	r1, [r3, #12]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	7bd8      	ldrb	r0, [r3, #15]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	8b52      	ldrh	r2, [r2, #26]
 8005694:	9202      	str	r2, [sp, #8]
 8005696:	2202      	movs	r2, #2
 8005698:	9201      	str	r2, [sp, #4]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	4623      	mov	r3, r4
 800569e:	4602      	mov	r2, r0
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 fd27 	bl	80070f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	7b5b      	ldrb	r3, [r3, #13]
 80056b2:	2200      	movs	r2, #0
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 f832 	bl	8007720 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	7b1b      	ldrb	r3, [r3, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f002 f82b 	bl	8007720 <USBH_LL_SetToggle>

  return USBH_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd90      	pop	{r4, r7, pc}

080056d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00e      	beq.n	800570c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 fd1c 	bl	8007132 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fd47 	bl	8007194 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	7b1b      	ldrb	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	7b1b      	ldrb	r3, [r3, #12]
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 fd09 	bl	8007132 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	7b1b      	ldrb	r3, [r3, #12]
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 fd34 	bl	8007194 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	7b5b      	ldrb	r3, [r3, #13]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00e      	beq.n	8005758 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	7b5b      	ldrb	r3, [r3, #13]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fcf6 	bl	8007132 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	7b5b      	ldrb	r3, [r3, #13]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 fd21 	bl	8007194 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	4618      	mov	r0, r3
 800576e:	f002 f8b9 	bl	80078e4 <free>
    phost->pActiveClass->pData = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005778:	2200      	movs	r2, #0
 800577a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3340      	adds	r3, #64	; 0x40
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f8b1 	bl	8005906 <GetLineCoding>
 80057a4:	4603      	mov	r3, r0
 80057a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80057a8:	7afb      	ldrb	r3, [r7, #11]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057b4:	2102      	movs	r1, #2
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80057ba:	7afb      	ldrb	r3, [r7, #11]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d877      	bhi.n	80058d8 <USBH_CDC_Process+0x114>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <USBH_CDC_Process+0x2c>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005805 	.word	0x08005805
 80057f4:	0800580b 	.word	0x0800580b
 80057f8:	0800583b 	.word	0x0800583b
 80057fc:	080058af 	.word	0x080058af
 8005800:	080058bd 	.word	0x080058bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]
      break;
 8005808:	e06d      	b.n	80058e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f897 	bl	8005944 <SetLineCoding>
 8005816:	4603      	mov	r3, r0
 8005818:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800581a:	7bbb      	ldrb	r3, [r7, #14]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005828:	e058      	b.n	80058dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d055      	beq.n	80058dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2204      	movs	r2, #4
 8005834:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005838:	e050      	b.n	80058dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	3340      	adds	r3, #64	; 0x40
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f860 	bl	8005906 <GetLineCoding>
 8005846:	4603      	mov	r3, r0
 8005848:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800584a:	7bbb      	ldrb	r3, [r7, #14]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d126      	bne.n	800589e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005862:	791b      	ldrb	r3, [r3, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d13b      	bne.n	80058e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005874:	429a      	cmp	r2, r3
 8005876:	d133      	bne.n	80058e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005882:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005884:	429a      	cmp	r2, r3
 8005886:	d12b      	bne.n	80058e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005890:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005892:	429a      	cmp	r2, r3
 8005894:	d124      	bne.n	80058e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f95a 	bl	8005b50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800589c:	e020      	b.n	80058e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800589e:	7bbb      	ldrb	r3, [r7, #14]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d01d      	beq.n	80058e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2204      	movs	r2, #4
 80058a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058ac:	e018      	b.n	80058e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f867 	bl	8005982 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f8dc 	bl	8005a72 <CDC_ProcessReception>
      break;
 80058ba:	e014      	b.n	80058e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80058bc:	2100      	movs	r1, #0
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 ffe5 	bl	800688e <USBH_ClrFeature>
 80058c4:	4603      	mov	r3, r0
 80058c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80058d6:	e005      	b.n	80058e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80058d8:	bf00      	nop
 80058da:	e004      	b.n	80058e6 <USBH_CDC_Process+0x122>
      break;
 80058dc:	bf00      	nop
 80058de:	e002      	b.n	80058e6 <USBH_CDC_Process+0x122>
      break;
 80058e0:	bf00      	nop
 80058e2:	e000      	b.n	80058e6 <USBH_CDC_Process+0x122>
      break;
 80058e4:	bf00      	nop

  }

  return status;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	22a1      	movs	r2, #161	; 0xa1
 8005914:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2221      	movs	r2, #33	; 0x21
 800591a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2207      	movs	r2, #7
 800592c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2207      	movs	r2, #7
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 f98a 	bl	8006c4e <USBH_CtlReq>
 800593a:	4603      	mov	r3, r0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2221      	movs	r2, #33	; 0x21
 8005952:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2207      	movs	r2, #7
 800596a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2207      	movs	r2, #7
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 f96b 	bl	8006c4e <USBH_CtlReq>
 8005978:	4603      	mov	r3, r0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b086      	sub	sp, #24
 8005986:	af02      	add	r7, sp, #8
 8005988:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005994:	2300      	movs	r3, #0
 8005996:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d002      	beq.n	80059a8 <CDC_ProcessTransmission+0x26>
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d025      	beq.n	80059f2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80059a6:	e060      	b.n	8005a6a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	8b12      	ldrh	r2, [r2, #24]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d90c      	bls.n	80059ce <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8b1a      	ldrh	r2, [r3, #24]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	7b58      	ldrb	r0, [r3, #13]
 80059c0:	2301      	movs	r3, #1
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 fb51 	bl	800706e <USBH_BulkSendData>
 80059cc:	e00c      	b.n	80059e8 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	7b58      	ldrb	r0, [r3, #13]
 80059dc:	2301      	movs	r3, #1
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4603      	mov	r3, r0
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fb43 	bl	800706e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80059f0:	e03b      	b.n	8005a6a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	7b5b      	ldrb	r3, [r3, #13]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fe67 	bl	80076cc <USBH_LL_GetURBState>
 80059fe:	4603      	mov	r3, r0
 8005a00:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a02:	7afb      	ldrb	r3, [r7, #11]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d128      	bne.n	8005a5a <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	8b12      	ldrh	r2, [r2, #24]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d90e      	bls.n	8005a32 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	8b12      	ldrh	r2, [r2, #24]
 8005a1c:	1a9a      	subs	r2, r3, r2
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	8b12      	ldrh	r2, [r2, #24]
 8005a2a:	441a      	add	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	61da      	str	r2, [r3, #28]
 8005a30:	e002      	b.n	8005a38 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a48:	e00e      	b.n	8005a68 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f868 	bl	8005b28 <USBH_CDC_TransmitCallback>
      break;
 8005a58:	e006      	b.n	8005a68 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d103      	bne.n	8005a68 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a68:	bf00      	nop
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d002      	beq.n	8005a98 <CDC_ProcessReception+0x26>
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d00e      	beq.n	8005ab4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005a96:	e043      	b.n	8005b20 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6a19      	ldr	r1, [r3, #32]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	8b5a      	ldrh	r2, [r3, #26]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	7b1b      	ldrb	r3, [r3, #12]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fb07 	bl	80070b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2204      	movs	r2, #4
 8005aae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ab2:	e035      	b.n	8005b20 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	7b1b      	ldrb	r3, [r3, #12]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fe06 	bl	80076cc <USBH_LL_GetURBState>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d129      	bne.n	8005b1e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	7b1b      	ldrb	r3, [r3, #12]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fd69 	bl	80075a8 <USBH_LL_GetLastXferSize>
 8005ad6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d016      	beq.n	8005b10 <CDC_ProcessReception+0x9e>
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	8b5b      	ldrh	r3, [r3, #26]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d210      	bcs.n	8005b10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad2      	subs	r2, r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	6a1a      	ldr	r2, [r3, #32]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	441a      	add	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2203      	movs	r2, #3
 8005b0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b0e:	e006      	b.n	8005b1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f80f 	bl	8005b3c <USBH_CDC_ReceiveCallback>
      break;
 8005b1e:	bf00      	nop
  }
}
 8005b20:	bf00      	nop
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e029      	b.n	8005bd0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	79fa      	ldrb	r2, [r7, #7]
 8005b80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f81f 	bl	8005bd8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f001 fc3b 	bl	8007444 <USBH_LL_Init>

  return USBH_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e009      	b.n	8005bfe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	33e0      	adds	r3, #224	; 0xe0
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b0e      	cmp	r3, #14
 8005c02:	d9f2      	bls.n	8005bea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e009      	b.n	8005c1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c24:	d3f1      	bcc.n	8005c0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10e      	bne.n	8005cbc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ca4:	1c59      	adds	r1, r3, #1
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	33de      	adds	r3, #222	; 0xde
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
 8005cba:	e004      	b.n	8005cc6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	73fb      	strb	r3, [r7, #15]
 8005cc0:	e001      	b.n	8005cc6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d204      	bcs.n	8005cfa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005cf8:	e001      	b.n	8005cfe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	4608      	mov	r0, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	70fb      	strb	r3, [r7, #3]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70bb      	strb	r3, [r7, #2]
 8005d22:	4613      	mov	r3, r2
 8005d24:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d34:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d36:	e025      	b.n	8005d84 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	221a      	movs	r2, #26
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	3308      	adds	r3, #8
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	3302      	adds	r3, #2
 8005d48:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	795b      	ldrb	r3, [r3, #5]
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d002      	beq.n	8005d5a <USBH_FindInterface+0x4e>
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	2bff      	cmp	r3, #255	; 0xff
 8005d58:	d111      	bne.n	8005d7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d5e:	78ba      	ldrb	r2, [r7, #2]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d002      	beq.n	8005d6a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d64:	78bb      	ldrb	r3, [r7, #2]
 8005d66:	2bff      	cmp	r3, #255	; 0xff
 8005d68:	d109      	bne.n	8005d7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d6e:	787a      	ldrb	r2, [r7, #1]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d002      	beq.n	8005d7a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d74:	787b      	ldrb	r3, [r7, #1]
 8005d76:	2bff      	cmp	r3, #255	; 0xff
 8005d78:	d101      	bne.n	8005d7e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	e006      	b.n	8005d8c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	3301      	adds	r3, #1
 8005d82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d9d6      	bls.n	8005d38 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005d8a:	23ff      	movs	r3, #255	; 0xff
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 fb8b 	bl	80074bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005da6:	2101      	movs	r1, #1
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 fca2 	bl	80076f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af04      	add	r7, sp, #16
 8005dbe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d102      	bne.n	8005dda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b0b      	cmp	r3, #11
 8005de2:	f200 81b3 	bhi.w	800614c <USBH_Process+0x394>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <USBH_Process+0x34>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e1d 	.word	0x08005e1d
 8005df0:	08005e4f 	.word	0x08005e4f
 8005df4:	08005eb7 	.word	0x08005eb7
 8005df8:	080060e7 	.word	0x080060e7
 8005dfc:	0800614d 	.word	0x0800614d
 8005e00:	08005f5b 	.word	0x08005f5b
 8005e04:	0800608d 	.word	0x0800608d
 8005e08:	08005f91 	.word	0x08005f91
 8005e0c:	08005fb1 	.word	0x08005fb1
 8005e10:	08005fd1 	.word	0x08005fd1
 8005e14:	08005fff 	.word	0x08005fff
 8005e18:	080060cf 	.word	0x080060cf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8193 	beq.w	8006150 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005e30:	20c8      	movs	r0, #200	; 0xc8
 8005e32:	f001 fca8 	bl	8007786 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fb9b 	bl	8007572 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005e4c:	e180      	b.n	8006150 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e66:	e182      	b.n	800616e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e72:	d914      	bls.n	8005e9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d903      	bls.n	8005e96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	220d      	movs	r2, #13
 8005e92:	701a      	strb	r2, [r3, #0]
      break;
 8005e94:	e16b      	b.n	800616e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
      break;
 8005e9c:	e167      	b.n	800616e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ea4:	f103 020a 	add.w	r2, r3, #10
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005eae:	200a      	movs	r0, #10
 8005eb0:	f001 fc69 	bl	8007786 <USBH_Delay>
      break;
 8005eb4:	e15b      	b.n	800616e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ec6:	2104      	movs	r1, #4
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005ecc:	2064      	movs	r0, #100	; 0x64
 8005ece:	f001 fc5a 	bl	8007786 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 fb28 	bl	8007528 <USBH_LL_GetSpeed>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2205      	movs	r2, #5
 8005ee6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005ee8:	2100      	movs	r1, #0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 f931 	bl	8007152 <USBH_AllocPipe>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 f929 	bl	8007152 <USBH_AllocPipe>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7919      	ldrb	r1, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	9202      	str	r2, [sp, #8]
 8005f20:	2200      	movs	r2, #0
 8005f22:	9201      	str	r2, [sp, #4]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	4603      	mov	r3, r0
 8005f28:	2280      	movs	r2, #128	; 0x80
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 f8e2 	bl	80070f4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7959      	ldrb	r1, [r3, #5]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f44:	b292      	uxth	r2, r2
 8005f46:	9202      	str	r2, [sp, #8]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	9201      	str	r2, [sp, #4]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2200      	movs	r2, #0
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 f8ce 	bl	80070f4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f58:	e109      	b.n	800616e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f90c 	bl	8006178 <USBH_HandleEnum>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f040 80f3 	bne.w	8006154 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d103      	bne.n	8005f88 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2208      	movs	r2, #8
 8005f84:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f86:	e0e5      	b.n	8006154 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2207      	movs	r2, #7
 8005f8c:	701a      	strb	r2, [r3, #0]
      break;
 8005f8e:	e0e1      	b.n	8006154 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80de 	beq.w	8006158 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2208      	movs	r2, #8
 8005fac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005fae:	e0d3      	b.n	8006158 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fc20 	bl	8006800 <USBH_SetCfg>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 80ca 	bne.w	800615c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2209      	movs	r2, #9
 8005fcc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fce:	e0c5      	b.n	800615c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00b      	beq.n	8005ff6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005fde:	2101      	movs	r1, #1
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fc30 	bl	8006846 <USBH_SetFeature>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 80b9 	bne.w	8006160 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	220a      	movs	r2, #10
 8005ff2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ff4:	e0b4      	b.n	8006160 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	220a      	movs	r2, #10
 8005ffa:	701a      	strb	r2, [r3, #0]
      break;
 8005ffc:	e0b0      	b.n	8006160 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 80ad 	beq.w	8006164 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e016      	b.n	8006046 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	32de      	adds	r2, #222	; 0xde
 800601e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006022:	791a      	ldrb	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800602a:	429a      	cmp	r2, r3
 800602c:	d108      	bne.n	8006040 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800602e:	7bfa      	ldrb	r2, [r7, #15]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	32de      	adds	r2, #222	; 0xde
 8006034:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800603e:	e005      	b.n	800604c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	3301      	adds	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0e5      	beq.n	8006018 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2206      	movs	r2, #6
 800606c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006074:	2103      	movs	r1, #3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800607a:	e073      	b.n	8006164 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	220d      	movs	r2, #13
 8006080:	701a      	strb	r2, [r3, #0]
      break;
 8006082:	e06f      	b.n	8006164 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	220d      	movs	r2, #13
 8006088:	701a      	strb	r2, [r3, #0]
      break;
 800608a:	e06b      	b.n	8006164 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	220b      	movs	r2, #11
 80060b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060b4:	e058      	b.n	8006168 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d154      	bne.n	8006168 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	220d      	movs	r2, #13
 80060c2:	701a      	strb	r2, [r3, #0]
      break;
 80060c4:	e050      	b.n	8006168 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	220d      	movs	r2, #13
 80060ca:	701a      	strb	r2, [r3, #0]
      break;
 80060cc:	e04c      	b.n	8006168 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d049      	beq.n	800616c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
      }
      break;
 80060e4:	e042      	b.n	800616c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fd72 	bl	8005bd8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006122:	2105      	movs	r1, #5
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d107      	bne.n	8006144 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fe2b 	bl	8005d98 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006142:	e014      	b.n	800616e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f9b9 	bl	80074bc <USBH_LL_Start>
      break;
 800614a:	e010      	b.n	800616e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800614c:	bf00      	nop
 800614e:	e00e      	b.n	800616e <USBH_Process+0x3b6>
      break;
 8006150:	bf00      	nop
 8006152:	e00c      	b.n	800616e <USBH_Process+0x3b6>
      break;
 8006154:	bf00      	nop
 8006156:	e00a      	b.n	800616e <USBH_Process+0x3b6>
    break;
 8006158:	bf00      	nop
 800615a:	e008      	b.n	800616e <USBH_Process+0x3b6>
      break;
 800615c:	bf00      	nop
 800615e:	e006      	b.n	800616e <USBH_Process+0x3b6>
      break;
 8006160:	bf00      	nop
 8006162:	e004      	b.n	800616e <USBH_Process+0x3b6>
      break;
 8006164:	bf00      	nop
 8006166:	e002      	b.n	800616e <USBH_Process+0x3b6>
      break;
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <USBH_Process+0x3b6>
      break;
 800616c:	bf00      	nop
  }
  return USBH_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af04      	add	r7, sp, #16
 800617e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006184:	2301      	movs	r3, #1
 8006186:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b07      	cmp	r3, #7
 800618e:	f200 81c1 	bhi.w	8006514 <USBH_HandleEnum+0x39c>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <USBH_HandleEnum+0x20>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061b9 	.word	0x080061b9
 800619c:	08006277 	.word	0x08006277
 80061a0:	080062e1 	.word	0x080062e1
 80061a4:	0800636f 	.word	0x0800636f
 80061a8:	080063d9 	.word	0x080063d9
 80061ac:	08006449 	.word	0x08006449
 80061b0:	0800648f 	.word	0x0800648f
 80061b4:	080064d5 	.word	0x080064d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80061b8:	2108      	movs	r1, #8
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa50 	bl	8006660 <USBH_Get_DevDesc>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d130      	bne.n	800622c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7919      	ldrb	r1, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061ee:	b292      	uxth	r2, r2
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	9201      	str	r2, [sp, #4]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	4603      	mov	r3, r0
 80061fa:	2280      	movs	r2, #128	; 0x80
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 ff79 	bl	80070f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7959      	ldrb	r1, [r3, #5]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006216:	b292      	uxth	r2, r2
 8006218:	9202      	str	r2, [sp, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	9201      	str	r2, [sp, #4]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4603      	mov	r3, r0
 8006222:	2200      	movs	r2, #0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 ff65 	bl	80070f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800622a:	e175      	b.n	8006518 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b03      	cmp	r3, #3
 8006230:	f040 8172 	bne.w	8006518 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800623a:	3301      	adds	r3, #1
 800623c:	b2da      	uxtb	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800624a:	2b03      	cmp	r3, #3
 800624c:	d903      	bls.n	8006256 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	220d      	movs	r2, #13
 8006252:	701a      	strb	r2, [r3, #0]
      break;
 8006254:	e160      	b.n	8006518 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	795b      	ldrb	r3, [r3, #5]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 ff99 	bl	8007194 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 ff93 	bl	8007194 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
      break;
 8006274:	e150      	b.n	8006518 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006276:	2112      	movs	r1, #18
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f9f1 	bl	8006660 <USBH_Get_DevDesc>
 800627e:	4603      	mov	r3, r0
 8006280:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800628e:	e145      	b.n	800651c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	2b03      	cmp	r3, #3
 8006294:	f040 8142 	bne.w	800651c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800629e:	3301      	adds	r3, #1
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d903      	bls.n	80062ba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	220d      	movs	r2, #13
 80062b6:	701a      	strb	r2, [r3, #0]
      break;
 80062b8:	e130      	b.n	800651c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	795b      	ldrb	r3, [r3, #5]
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 ff67 	bl	8007194 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	791b      	ldrb	r3, [r3, #4]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 ff61 	bl	8007194 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]
      break;
 80062de:	e11d      	b.n	800651c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80062e0:	2101      	movs	r1, #1
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa68 	bl	80067b8 <USBH_SetAddress>
 80062e8:	4603      	mov	r3, r0
 80062ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d132      	bne.n	8006358 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80062f2:	2002      	movs	r0, #2
 80062f4:	f001 fa47 	bl	8007786 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2203      	movs	r2, #3
 8006304:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	7919      	ldrb	r1, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800631a:	b292      	uxth	r2, r2
 800631c:	9202      	str	r2, [sp, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	9201      	str	r2, [sp, #4]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4603      	mov	r3, r0
 8006326:	2280      	movs	r2, #128	; 0x80
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fee3 	bl	80070f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	7959      	ldrb	r1, [r3, #5]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006342:	b292      	uxth	r2, r2
 8006344:	9202      	str	r2, [sp, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	9201      	str	r2, [sp, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4603      	mov	r3, r0
 800634e:	2200      	movs	r2, #0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fecf 	bl	80070f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006356:	e0e3      	b.n	8006520 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b03      	cmp	r3, #3
 800635c:	f040 80e0 	bne.w	8006520 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	220d      	movs	r2, #13
 8006364:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	705a      	strb	r2, [r3, #1]
      break;
 800636c:	e0d8      	b.n	8006520 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800636e:	2109      	movs	r1, #9
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f99d 	bl	80066b0 <USBH_Get_CfgDesc>
 8006376:	4603      	mov	r3, r0
 8006378:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2204      	movs	r2, #4
 8006384:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006386:	e0cd      	b.n	8006524 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	2b03      	cmp	r3, #3
 800638c:	f040 80ca 	bne.w	8006524 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006396:	3301      	adds	r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d903      	bls.n	80063b2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	220d      	movs	r2, #13
 80063ae:	701a      	strb	r2, [r3, #0]
      break;
 80063b0:	e0b8      	b.n	8006524 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	795b      	ldrb	r3, [r3, #5]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 feeb 	bl	8007194 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	791b      	ldrb	r3, [r3, #4]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fee5 	bl	8007194 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
      break;
 80063d6:	e0a5      	b.n	8006524 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f965 	bl	80066b0 <USBH_Get_CfgDesc>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2205      	movs	r2, #5
 80063f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063f6:	e097      	b.n	8006528 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	f040 8094 	bne.w	8006528 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006406:	3301      	adds	r3, #1
 8006408:	b2da      	uxtb	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006416:	2b03      	cmp	r3, #3
 8006418:	d903      	bls.n	8006422 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	220d      	movs	r2, #13
 800641e:	701a      	strb	r2, [r3, #0]
      break;
 8006420:	e082      	b.n	8006528 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	795b      	ldrb	r3, [r3, #5]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 feb3 	bl	8007194 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	791b      	ldrb	r3, [r3, #4]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fead 	bl	8007194 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
      break;
 8006446:	e06f      	b.n	8006528 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800644e:	2b00      	cmp	r3, #0
 8006450:	d019      	beq.n	8006486 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800645e:	23ff      	movs	r3, #255	; 0xff
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f949 	bl	80066f8 <USBH_Get_StringDesc>
 8006466:	4603      	mov	r3, r0
 8006468:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2206      	movs	r2, #6
 8006474:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006476:	e059      	b.n	800652c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d156      	bne.n	800652c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2206      	movs	r2, #6
 8006482:	705a      	strb	r2, [r3, #1]
      break;
 8006484:	e052      	b.n	800652c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2206      	movs	r2, #6
 800648a:	705a      	strb	r2, [r3, #1]
      break;
 800648c:	e04e      	b.n	800652c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006494:	2b00      	cmp	r3, #0
 8006496:	d019      	beq.n	80064cc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064a4:	23ff      	movs	r3, #255	; 0xff
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f926 	bl	80066f8 <USBH_Get_StringDesc>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2207      	movs	r2, #7
 80064ba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80064bc:	e038      	b.n	8006530 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d135      	bne.n	8006530 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2207      	movs	r2, #7
 80064c8:	705a      	strb	r2, [r3, #1]
      break;
 80064ca:	e031      	b.n	8006530 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2207      	movs	r2, #7
 80064d0:	705a      	strb	r2, [r3, #1]
      break;
 80064d2:	e02d      	b.n	8006530 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d017      	beq.n	800650e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80064ea:	23ff      	movs	r3, #255	; 0xff
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f903 	bl	80066f8 <USBH_Get_StringDesc>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006500:	e018      	b.n	8006534 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b03      	cmp	r3, #3
 8006506:	d115      	bne.n	8006534 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
      break;
 800650c:	e012      	b.n	8006534 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
      break;
 8006512:	e00f      	b.n	8006534 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006514:	bf00      	nop
 8006516:	e00e      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 8006518:	bf00      	nop
 800651a:	e00c      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 800651c:	bf00      	nop
 800651e:	e00a      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 8006520:	bf00      	nop
 8006522:	e008      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 8006524:	bf00      	nop
 8006526:	e006      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 8006528:	bf00      	nop
 800652a:	e004      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 800652c:	bf00      	nop
 800652e:	e002      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 8006530:	bf00      	nop
 8006532:	e000      	b.n	8006536 <USBH_HandleEnum+0x3be>
      break;
 8006534:	bf00      	nop
  }
  return Status;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f804 	bl	8006582 <USBH_HandleSof>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b0b      	cmp	r3, #11
 8006592:	d10a      	bne.n	80065aa <USBH_HandleSof+0x28>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
  }
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80065c2:	bf00      	nop
}
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80065de:	bf00      	nop
}
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 ff5a 	bl	80074f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	791b      	ldrb	r3, [r3, #4]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fda5 	bl	8007194 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	795b      	ldrb	r3, [r3, #5]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fd9f 	bl	8007194 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af02      	add	r7, sp, #8
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	b29b      	uxth	r3, r3
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f864 	bl	800674e <USBH_GetDescriptor>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	b292      	uxth	r2, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	f000 f918 	bl	80068d6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	331c      	adds	r3, #28
 80066c0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80066c2:	887b      	ldrh	r3, [r7, #2]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f83d 	bl	800674e <USBH_GetDescriptor>
 80066d4:	4603      	mov	r3, r0
 80066d6:	72fb      	strb	r3, [r7, #11]
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d107      	bne.n	80066ee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066e4:	887a      	ldrh	r2, [r7, #2]
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 f964 	bl	80069b6 <USBH_ParseCfgDesc>
  }

  return status;
 80066ee:	7afb      	ldrb	r3, [r7, #11]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	461a      	mov	r2, r3
 8006704:	460b      	mov	r3, r1
 8006706:	72fb      	strb	r3, [r7, #11]
 8006708:	4613      	mov	r3, r2
 800670a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006714:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800671c:	893b      	ldrh	r3, [r7, #8]
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	460b      	mov	r3, r1
 8006722:	2100      	movs	r1, #0
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f812 	bl	800674e <USBH_GetDescriptor>
 800672a:	4603      	mov	r3, r0
 800672c:	75fb      	strb	r3, [r7, #23]
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d107      	bne.n	8006744 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800673a:	893a      	ldrh	r2, [r7, #8]
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fa37 	bl	8006bb2 <USBH_ParseStringDesc>
  }

  return status;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	607b      	str	r3, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	72fb      	strb	r3, [r7, #11]
 800675c:	4613      	mov	r3, r2
 800675e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	789b      	ldrb	r3, [r3, #2]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d11c      	bne.n	80067a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800676e:	b2da      	uxtb	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2206      	movs	r2, #6
 8006778:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	893a      	ldrh	r2, [r7, #8]
 800677e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800678a:	d104      	bne.n	8006796 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f240 4209 	movw	r2, #1033	; 0x409
 8006792:	829a      	strh	r2, [r3, #20]
 8006794:	e002      	b.n	800679c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8b3a      	ldrh	r2, [r7, #24]
 80067a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80067a2:	8b3b      	ldrh	r3, [r7, #24]
 80067a4:	461a      	mov	r2, r3
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fa50 	bl	8006c4e <USBH_CtlReq>
 80067ae:	4603      	mov	r3, r0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	789b      	ldrb	r3, [r3, #2]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d10f      	bne.n	80067ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2205      	movs	r2, #5
 80067d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80067ec:	2200      	movs	r2, #0
 80067ee:	2100      	movs	r1, #0
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa2c 	bl	8006c4e <USBH_CtlReq>
 80067f6:	4603      	mov	r3, r0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10e      	bne.n	8006832 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2209      	movs	r2, #9
 800681e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	887a      	ldrh	r2, [r7, #2]
 8006824:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006832:	2200      	movs	r2, #0
 8006834:	2100      	movs	r1, #0
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa09 	bl	8006c4e <USBH_CtlReq>
 800683c:	4603      	mov	r3, r0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	789b      	ldrb	r3, [r3, #2]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d10f      	bne.n	800687a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2203      	movs	r2, #3
 8006864:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9e5 	bl	8006c4e <USBH_CtlReq>
 8006884:	4603      	mov	r3, r0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d10f      	bne.n	80068c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f9c1 	bl	8006c4e <USBH_CtlReq>
 80068cc:	4603      	mov	r3, r0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	4613      	mov	r3, r2
 80068e2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	785a      	ldrb	r2, [r3, #1]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	3302      	adds	r3, #2
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	3303      	adds	r3, #3
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	b29b      	uxth	r3, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	791a      	ldrb	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	795a      	ldrb	r2, [r3, #5]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	799a      	ldrb	r2, [r3, #6]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	79da      	ldrb	r2, [r3, #7]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	2b08      	cmp	r3, #8
 8006934:	d939      	bls.n	80069aa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	3308      	adds	r3, #8
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b29a      	uxth	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	3309      	adds	r3, #9
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	b29b      	uxth	r3, r3
 800694a:	4313      	orrs	r3, r2
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	330a      	adds	r3, #10
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	b29a      	uxth	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	330b      	adds	r3, #11
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	b29b      	uxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	330c      	adds	r3, #12
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	b29a      	uxth	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	330d      	adds	r3, #13
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	b29b      	uxth	r3, r3
 8006982:	4313      	orrs	r3, r2
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	7b9a      	ldrb	r2, [r3, #14]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	7bda      	ldrb	r2, [r3, #15]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	7c1a      	ldrb	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	7c5a      	ldrb	r2, [r3, #17]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	745a      	strb	r2, [r3, #17]
  }
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08a      	sub	sp, #40	; 0x28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	4613      	mov	r3, r2
 80069c2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	785a      	ldrb	r2, [r3, #1]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3302      	adds	r3, #2
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3303      	adds	r3, #3
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	791a      	ldrb	r2, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	795a      	ldrb	r2, [r3, #5]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	799a      	ldrb	r2, [r3, #6]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	79da      	ldrb	r2, [r3, #7]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	7a1a      	ldrb	r2, [r3, #8]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	2b09      	cmp	r3, #9
 8006a30:	d95f      	bls.n	8006af2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006a32:	2309      	movs	r3, #9
 8006a34:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a3a:	e051      	b.n	8006ae0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a3c:	f107 0316 	add.w	r3, r7, #22
 8006a40:	4619      	mov	r1, r3
 8006a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a44:	f000 f8e8 	bl	8006c18 <USBH_GetNextDesc>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	785b      	ldrb	r3, [r3, #1]
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d146      	bne.n	8006ae0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a56:	221a      	movs	r2, #26
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	3302      	adds	r3, #2
 8006a64:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a68:	69f8      	ldr	r0, [r7, #28]
 8006a6a:	f000 f846 	bl	8006afa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a78:	e022      	b.n	8006ac0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a7a:	f107 0316 	add.w	r3, r7, #22
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a82:	f000 f8c9 	bl	8006c18 <USBH_GetNextDesc>
 8006a86:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b05      	cmp	r3, #5
 8006a8e:	d117      	bne.n	8006ac0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a94:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a98:	3201      	adds	r2, #1
 8006a9a:	00d2      	lsls	r2, r2, #3
 8006a9c:	211a      	movs	r1, #26
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ab0:	69b8      	ldr	r0, [r7, #24]
 8006ab2:	f000 f851 	bl	8006b58 <USBH_ParseEPDesc>
            ep_ix++;
 8006ab6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006aba:	3301      	adds	r3, #1
 8006abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	791b      	ldrb	r3, [r3, #4]
 8006ac4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d204      	bcs.n	8006ad6 <USBH_ParseCfgDesc+0x120>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	885a      	ldrh	r2, [r3, #2]
 8006ad0:	8afb      	ldrh	r3, [r7, #22]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d8d1      	bhi.n	8006a7a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ada:	3301      	adds	r3, #1
 8006adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d804      	bhi.n	8006af2 <USBH_ParseCfgDesc+0x13c>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	885a      	ldrh	r2, [r3, #2]
 8006aec:	8afb      	ldrh	r3, [r7, #22]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d8a4      	bhi.n	8006a3c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006af2:	bf00      	nop
 8006af4:	3728      	adds	r7, #40	; 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781a      	ldrb	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	785a      	ldrb	r2, [r3, #1]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	789a      	ldrb	r2, [r3, #2]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	78da      	ldrb	r2, [r3, #3]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	791a      	ldrb	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	795a      	ldrb	r2, [r3, #5]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	799a      	ldrb	r2, [r3, #6]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	79da      	ldrb	r2, [r3, #7]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	7a1a      	ldrb	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	721a      	strb	r2, [r3, #8]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785a      	ldrb	r2, [r3, #1]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	789a      	ldrb	r2, [r3, #2]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	78da      	ldrb	r2, [r3, #3]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	3304      	adds	r3, #4
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	3305      	adds	r3, #5
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	799a      	ldrb	r2, [r3, #6]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	719a      	strb	r2, [r3, #6]
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b087      	sub	sp, #28
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d120      	bne.n	8006c0c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	1e9a      	subs	r2, r3, #2
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	bf28      	it	cs
 8006bd6:	4613      	movcs	r3, r2
 8006bd8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3302      	adds	r3, #2
 8006bde:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006be0:	2300      	movs	r3, #0
 8006be2:	82fb      	strh	r3, [r7, #22]
 8006be4:	e00b      	b.n	8006bfe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006be6:	8afb      	ldrh	r3, [r7, #22]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006bf8:	8afb      	ldrh	r3, [r7, #22]
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	82fb      	strh	r3, [r7, #22]
 8006bfe:	8afa      	ldrh	r2, [r7, #22]
 8006c00:	8abb      	ldrh	r3, [r7, #20]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d3ef      	bcc.n	8006be6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	881a      	ldrh	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006c40:	68fb      	ldr	r3, [r7, #12]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	789b      	ldrb	r3, [r3, #2]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d002      	beq.n	8006c6e <USBH_CtlReq+0x20>
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d00f      	beq.n	8006c8c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006c6c:	e027      	b.n	8006cbe <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2202      	movs	r2, #2
 8006c84:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8a:	e018      	b.n	8006cbe <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f81b 	bl	8006cc8 <USBH_HandleControl>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <USBH_CtlReq+0x54>
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d106      	bne.n	8006cb0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	761a      	strb	r2, [r3, #24]
      break;
 8006cae:	e005      	b.n	8006cbc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d102      	bne.n	8006cbc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	709a      	strb	r2, [r3, #2]
      break;
 8006cbc:	bf00      	nop
  }
  return status;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7e1b      	ldrb	r3, [r3, #24]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	f200 8158 	bhi.w	8006f94 <USBH_HandleControl+0x2cc>
 8006ce4:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <USBH_HandleControl+0x24>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	08006d33 	.word	0x08006d33
 8006cf4:	08006d9d 	.word	0x08006d9d
 8006cf8:	08006dc3 	.word	0x08006dc3
 8006cfc:	08006dfb 	.word	0x08006dfb
 8006d00:	08006e27 	.word	0x08006e27
 8006d04:	08006e79 	.word	0x08006e79
 8006d08:	08006e9b 	.word	0x08006e9b
 8006d0c:	08006ed7 	.word	0x08006ed7
 8006d10:	08006eff 	.word	0x08006eff
 8006d14:	08006f3d 	.word	0x08006f3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f103 0110 	add.w	r1, r3, #16
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	795b      	ldrb	r3, [r3, #5]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f945 	bl	8006fb4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	761a      	strb	r2, [r3, #24]
      break;
 8006d30:	e13b      	b.n	8006faa <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	795b      	ldrb	r3, [r3, #5]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fcc7 	bl	80076cc <USBH_LL_GetURBState>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d11e      	bne.n	8006d86 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7c1b      	ldrb	r3, [r3, #16]
 8006d4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d50:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8adb      	ldrh	r3, [r3, #22]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006d5a:	7b7b      	ldrb	r3, [r7, #13]
 8006d5c:	2b80      	cmp	r3, #128	; 0x80
 8006d5e:	d103      	bne.n	8006d68 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2203      	movs	r2, #3
 8006d64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d66:	e117      	b.n	8006f98 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	761a      	strb	r2, [r3, #24]
      break;
 8006d6e:	e113      	b.n	8006f98 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006d70:	7b7b      	ldrb	r3, [r7, #13]
 8006d72:	2b80      	cmp	r3, #128	; 0x80
 8006d74:	d103      	bne.n	8006d7e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2209      	movs	r2, #9
 8006d7a:	761a      	strb	r2, [r3, #24]
      break;
 8006d7c:	e10c      	b.n	8006f98 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2207      	movs	r2, #7
 8006d82:	761a      	strb	r2, [r3, #24]
      break;
 8006d84:	e108      	b.n	8006f98 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d003      	beq.n	8006d94 <USBH_HandleControl+0xcc>
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	f040 8102 	bne.w	8006f98 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220b      	movs	r2, #11
 8006d98:	761a      	strb	r2, [r3, #24]
      break;
 8006d9a:	e0fd      	b.n	8006f98 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6899      	ldr	r1, [r3, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	899a      	ldrh	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	791b      	ldrb	r3, [r3, #4]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f93c 	bl	8007032 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	761a      	strb	r2, [r3, #24]
      break;
 8006dc0:	e0f3      	b.n	8006faa <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	791b      	ldrb	r3, [r3, #4]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc7f 	bl	80076cc <USBH_LL_GetURBState>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d102      	bne.n	8006dde <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2209      	movs	r2, #9
 8006ddc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2b05      	cmp	r3, #5
 8006de2:	d102      	bne.n	8006dea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006de4:	2303      	movs	r3, #3
 8006de6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006de8:	e0d8      	b.n	8006f9c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	f040 80d5 	bne.w	8006f9c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	220b      	movs	r2, #11
 8006df6:	761a      	strb	r2, [r3, #24]
      break;
 8006df8:	e0d0      	b.n	8006f9c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6899      	ldr	r1, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	899a      	ldrh	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7958      	ldrb	r0, [r3, #5]
 8006e06:	2301      	movs	r3, #1
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8eb 	bl	8006fe8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2206      	movs	r2, #6
 8006e22:	761a      	strb	r2, [r3, #24]
      break;
 8006e24:	e0c1      	b.n	8006faa <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	795b      	ldrb	r3, [r3, #5]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fc4d 	bl	80076cc <USBH_LL_GetURBState>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d103      	bne.n	8006e44 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2207      	movs	r2, #7
 8006e40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e42:	e0ad      	b.n	8006fa0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d105      	bne.n	8006e56 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	220c      	movs	r2, #12
 8006e4e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006e50:	2303      	movs	r3, #3
 8006e52:	73fb      	strb	r3, [r7, #15]
      break;
 8006e54:	e0a4      	b.n	8006fa0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d103      	bne.n	8006e64 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2205      	movs	r2, #5
 8006e60:	761a      	strb	r2, [r3, #24]
      break;
 8006e62:	e09d      	b.n	8006fa0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	f040 809a 	bne.w	8006fa0 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	220b      	movs	r2, #11
 8006e70:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	73fb      	strb	r3, [r7, #15]
      break;
 8006e76:	e093      	b.n	8006fa0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	791b      	ldrb	r3, [r3, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2100      	movs	r1, #0
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f8d6 	bl	8007032 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2208      	movs	r2, #8
 8006e96:	761a      	strb	r2, [r3, #24]

      break;
 8006e98:	e087      	b.n	8006faa <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fc13 	bl	80076cc <USBH_LL_GetURBState>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d105      	bne.n	8006ebc <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	220d      	movs	r2, #13
 8006eb4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006eba:	e073      	b.n	8006fa4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d103      	bne.n	8006eca <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	220b      	movs	r2, #11
 8006ec6:	761a      	strb	r2, [r3, #24]
      break;
 8006ec8:	e06c      	b.n	8006fa4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b05      	cmp	r3, #5
 8006ece:	d169      	bne.n	8006fa4 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed4:	e066      	b.n	8006fa4 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	795a      	ldrb	r2, [r3, #5]
 8006eda:	2301      	movs	r3, #1
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f87f 	bl	8006fe8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	220a      	movs	r2, #10
 8006efa:	761a      	strb	r2, [r3, #24]
      break;
 8006efc:	e055      	b.n	8006faa <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	795b      	ldrb	r3, [r3, #5]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fbe1 	bl	80076cc <USBH_LL_GetURBState>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d105      	bne.n	8006f20 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	220d      	movs	r2, #13
 8006f1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f1e:	e043      	b.n	8006fa8 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d103      	bne.n	8006f2e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2209      	movs	r2, #9
 8006f2a:	761a      	strb	r2, [r3, #24]
      break;
 8006f2c:	e03c      	b.n	8006fa8 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d139      	bne.n	8006fa8 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	220b      	movs	r2, #11
 8006f38:	761a      	strb	r2, [r3, #24]
      break;
 8006f3a:	e035      	b.n	8006fa8 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7e5b      	ldrb	r3, [r3, #25]
 8006f40:	3301      	adds	r3, #1
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	765a      	strb	r2, [r3, #25]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7e5b      	ldrb	r3, [r3, #25]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d806      	bhi.n	8006f5e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006f5c:	e025      	b.n	8006faa <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f64:	2106      	movs	r1, #6
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	795b      	ldrb	r3, [r3, #5]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f90c 	bl	8007194 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	791b      	ldrb	r3, [r3, #4]
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f906 	bl	8007194 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	73fb      	strb	r3, [r7, #15]
      break;
 8006f92:	e00a      	b.n	8006faa <USBH_HandleControl+0x2e2>

    default:
      break;
 8006f94:	bf00      	nop
 8006f96:	e008      	b.n	8006faa <USBH_HandleControl+0x2e2>
      break;
 8006f98:	bf00      	nop
 8006f9a:	e006      	b.n	8006faa <USBH_HandleControl+0x2e2>
      break;
 8006f9c:	bf00      	nop
 8006f9e:	e004      	b.n	8006faa <USBH_HandleControl+0x2e2>
      break;
 8006fa0:	bf00      	nop
 8006fa2:	e002      	b.n	8006faa <USBH_HandleControl+0x2e2>
      break;
 8006fa4:	bf00      	nop
 8006fa6:	e000      	b.n	8006faa <USBH_HandleControl+0x2e2>
      break;
 8006fa8:	bf00      	nop
  }

  return status;
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006fc2:	79f9      	ldrb	r1, [r7, #7]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9303      	str	r3, [sp, #12]
 8006fc8:	2308      	movs	r3, #8
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fb46 	bl	800766a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af04      	add	r7, sp, #16
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	80fb      	strh	r3, [r7, #6]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800700c:	7979      	ldrb	r1, [r7, #5]
 800700e:	7e3b      	ldrb	r3, [r7, #24]
 8007010:	9303      	str	r3, [sp, #12]
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	9302      	str	r3, [sp, #8]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	2301      	movs	r3, #1
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2300      	movs	r3, #0
 8007020:	2200      	movs	r2, #0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fb21 	bl	800766a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b088      	sub	sp, #32
 8007036:	af04      	add	r7, sp, #16
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	4611      	mov	r1, r2
 800703e:	461a      	mov	r2, r3
 8007040:	460b      	mov	r3, r1
 8007042:	80fb      	strh	r3, [r7, #6]
 8007044:	4613      	mov	r3, r2
 8007046:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007048:	7979      	ldrb	r1, [r7, #5]
 800704a:	2300      	movs	r3, #0
 800704c:	9303      	str	r3, [sp, #12]
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	9302      	str	r3, [sp, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	2301      	movs	r3, #1
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2300      	movs	r3, #0
 800705c:	2201      	movs	r2, #1
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fb03 	bl	800766a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007064:	2300      	movs	r3, #0

}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b088      	sub	sp, #32
 8007072:	af04      	add	r7, sp, #16
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	4611      	mov	r1, r2
 800707a:	461a      	mov	r2, r3
 800707c:	460b      	mov	r3, r1
 800707e:	80fb      	strh	r3, [r7, #6]
 8007080:	4613      	mov	r3, r2
 8007082:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007092:	7979      	ldrb	r1, [r7, #5]
 8007094:	7e3b      	ldrb	r3, [r7, #24]
 8007096:	9303      	str	r3, [sp, #12]
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	2301      	movs	r3, #1
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	2302      	movs	r3, #2
 80070a6:	2200      	movs	r2, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fade 	bl	800766a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af04      	add	r7, sp, #16
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4611      	mov	r1, r2
 80070c4:	461a      	mov	r2, r3
 80070c6:	460b      	mov	r3, r1
 80070c8:	80fb      	strh	r3, [r7, #6]
 80070ca:	4613      	mov	r3, r2
 80070cc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070ce:	7979      	ldrb	r1, [r7, #5]
 80070d0:	2300      	movs	r3, #0
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	9302      	str	r3, [sp, #8]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	2301      	movs	r3, #1
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2302      	movs	r3, #2
 80070e2:	2201      	movs	r2, #1
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fac0 	bl	800766a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af04      	add	r7, sp, #16
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4603      	mov	r3, r0
 8007104:	70fb      	strb	r3, [r7, #3]
 8007106:	460b      	mov	r3, r1
 8007108:	70bb      	strb	r3, [r7, #2]
 800710a:	4613      	mov	r3, r2
 800710c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800710e:	7878      	ldrb	r0, [r7, #1]
 8007110:	78ba      	ldrb	r2, [r7, #2]
 8007112:	78f9      	ldrb	r1, [r7, #3]
 8007114:	8b3b      	ldrh	r3, [r7, #24]
 8007116:	9302      	str	r3, [sp, #8]
 8007118:	7d3b      	ldrb	r3, [r7, #20]
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	7c3b      	ldrb	r3, [r7, #16]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	4603      	mov	r3, r0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa53 	bl	80075ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa72 	bl	800762c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f837 	bl	80071d2 <USBH_GetFreePipe>
 8007164:	4603      	mov	r3, r0
 8007166:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007168:	89fb      	ldrh	r3, [r7, #14]
 800716a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800716e:	4293      	cmp	r3, r2
 8007170:	d00a      	beq.n	8007188 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007172:	89fb      	ldrh	r3, [r7, #14]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	33e0      	adds	r3, #224	; 0xe0
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007188:	89fb      	ldrh	r3, [r7, #14]
 800718a:	b2db      	uxtb	r3, r3
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	2b0a      	cmp	r3, #10
 80071a4:	d80e      	bhi.n	80071c4 <USBH_FreePipe+0x30>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80071a6:	78f8      	ldrb	r0, [r7, #3]
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	33e0      	adds	r3, #224	; 0xe0
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
 80071e2:	e00f      	b.n	8007204 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	33e0      	adds	r3, #224	; 0xe0
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	e007      	b.n	800720e <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	3301      	adds	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b0a      	cmp	r3, #10
 8007208:	d9ec      	bls.n	80071e4 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800720a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007220:	2201      	movs	r2, #1
 8007222:	490e      	ldr	r1, [pc, #56]	; (800725c <MX_USB_HOST_Init+0x40>)
 8007224:	480e      	ldr	r0, [pc, #56]	; (8007260 <MX_USB_HOST_Init+0x44>)
 8007226:	f7fe fc9d 	bl	8005b64 <USBH_Init>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007230:	f7f9 fc46 	bl	8000ac0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007234:	490b      	ldr	r1, [pc, #44]	; (8007264 <MX_USB_HOST_Init+0x48>)
 8007236:	480a      	ldr	r0, [pc, #40]	; (8007260 <MX_USB_HOST_Init+0x44>)
 8007238:	f7fe fd22 	bl	8005c80 <USBH_RegisterClass>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007242:	f7f9 fc3d 	bl	8000ac0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007246:	4806      	ldr	r0, [pc, #24]	; (8007260 <MX_USB_HOST_Init+0x44>)
 8007248:	f7fe fda6 	bl	8005d98 <USBH_Start>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007252:	f7f9 fc35 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	0800727d 	.word	0x0800727d
 8007260:	200001b8 	.word	0x200001b8
 8007264:	2000000c 	.word	0x2000000c

08007268 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800726c:	4802      	ldr	r0, [pc, #8]	; (8007278 <MX_USB_HOST_Process+0x10>)
 800726e:	f7fe fda3 	bl	8005db8 <USBH_Process>
}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	200001b8 	.word	0x200001b8

0800727c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	3b01      	subs	r3, #1
 800728c:	2b04      	cmp	r3, #4
 800728e:	d819      	bhi.n	80072c4 <USBH_UserProcess+0x48>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <USBH_UserProcess+0x1c>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072c5 	.word	0x080072c5
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072c5 	.word	0x080072c5
 80072a4:	080072bd 	.word	0x080072bd
 80072a8:	080072ad 	.word	0x080072ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80072ac:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <USBH_UserProcess+0x58>)
 80072ae:	2203      	movs	r2, #3
 80072b0:	701a      	strb	r2, [r3, #0]
  break;
 80072b2:	e008      	b.n	80072c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <USBH_UserProcess+0x58>)
 80072b6:	2202      	movs	r2, #2
 80072b8:	701a      	strb	r2, [r3, #0]
  break;
 80072ba:	e004      	b.n	80072c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <USBH_UserProcess+0x58>)
 80072be:	2201      	movs	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
  break;
 80072c2:	e000      	b.n	80072c6 <USBH_UserProcess+0x4a>

  default:
  break;
 80072c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	200000b4 	.word	0x200000b4

080072d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e0:	f107 0314 	add.w	r3, r7, #20
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	609a      	str	r2, [r3, #8]
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f8:	d147      	bne.n	800738a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	4a25      	ldr	r2, [pc, #148]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 8007300:	4b24      	ldr	r3, [pc, #144]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	6313      	str	r3, [r2, #48]	; 0x30
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800731a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007324:	f107 0314 	add.w	r3, r7, #20
 8007328:	4619      	mov	r1, r3
 800732a:	481b      	ldr	r0, [pc, #108]	; (8007398 <HAL_HCD_MspInit+0xc0>)
 800732c:	f7f9 fe94 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007330:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007336:	2302      	movs	r3, #2
 8007338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733a:	2300      	movs	r3, #0
 800733c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800733e:	2300      	movs	r3, #0
 8007340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007342:	230a      	movs	r3, #10
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007346:	f107 0314 	add.w	r3, r7, #20
 800734a:	4619      	mov	r1, r3
 800734c:	4812      	ldr	r0, [pc, #72]	; (8007398 <HAL_HCD_MspInit+0xc0>)
 800734e:	f7f9 fe83 	bl	8001058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007352:	4a10      	ldr	r2, [pc, #64]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 8007354:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 8007356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735c:	6353      	str	r3, [r2, #52]	; 0x34
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	4a0c      	ldr	r2, [pc, #48]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 8007364:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 8007366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800736c:	6453      	str	r3, [r2, #68]	; 0x44
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <HAL_HCD_MspInit+0xbc>)
 8007370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	2043      	movs	r0, #67	; 0x43
 8007380:	f7f9 fe33 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007384:	2043      	movs	r0, #67	; 0x43
 8007386:	f7f9 fe4c 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800738a:	bf00      	nop
 800738c:	3728      	adds	r7, #40	; 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40023800 	.word	0x40023800
 8007398:	40020000 	.word	0x40020000

0800739c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff f8d7 	bl	800655e <USBH_LL_IncTimer>
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f90f 	bl	80065ea <USBH_LL_Connect>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff f918 	bl	8006618 <USBH_LL_Disconnect>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
 80073fc:	4613      	mov	r3, r2
 80073fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff f8c9 	bl	80065b2 <USBH_LL_PortEnabled>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff f8c9 	bl	80065ce <USBH_LL_PortDisabled>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007452:	2b01      	cmp	r3, #1
 8007454:	d12a      	bne.n	80074ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007456:	4a18      	ldr	r2, [pc, #96]	; (80074b8 <USBH_LL_Init+0x74>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <USBH_LL_Init+0x74>)
 8007462:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <USBH_LL_Init+0x74>)
 8007468:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800746c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <USBH_LL_Init+0x74>)
 8007470:	2208      	movs	r2, #8
 8007472:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007474:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <USBH_LL_Init+0x74>)
 8007476:	2201      	movs	r2, #1
 8007478:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800747a:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <USBH_LL_Init+0x74>)
 800747c:	2200      	movs	r2, #0
 800747e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007480:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <USBH_LL_Init+0x74>)
 8007482:	2202      	movs	r2, #2
 8007484:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <USBH_LL_Init+0x74>)
 8007488:	2200      	movs	r2, #0
 800748a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800748c:	480a      	ldr	r0, [pc, #40]	; (80074b8 <USBH_LL_Init+0x74>)
 800748e:	f7f9 ff96 	bl	80013be <HAL_HCD_Init>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007498:	f7f9 fb12 	bl	8000ac0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800749c:	4806      	ldr	r0, [pc, #24]	; (80074b8 <USBH_LL_Init+0x74>)
 800749e:	f7fa fb99 	bl	8001bd4 <HAL_HCD_GetCurrentFrame>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff f84a 	bl	8006540 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000590 	.word	0x20000590

080074bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fa fb06 	bl	8001ae4 <HAL_HCD_Start>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f95c 	bl	800779c <USBH_Get_USB_Status>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007508:	4618      	mov	r0, r3
 800750a:	f7fa fb0e 	bl	8001b2a <HAL_HCD_Stop>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	4618      	mov	r0, r3
 8007516:	f000 f941 	bl	800779c <USBH_Get_USB_Status>
 800751a:	4603      	mov	r3, r0
 800751c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800751e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800753a:	4618      	mov	r0, r3
 800753c:	f7fa fb58 	bl	8001bf0 <HAL_HCD_GetCurrentSpeed>
 8007540:	4603      	mov	r3, r0
 8007542:	2b01      	cmp	r3, #1
 8007544:	d007      	beq.n	8007556 <USBH_LL_GetSpeed+0x2e>
 8007546:	2b01      	cmp	r3, #1
 8007548:	d302      	bcc.n	8007550 <USBH_LL_GetSpeed+0x28>
 800754a:	2b02      	cmp	r3, #2
 800754c:	d006      	beq.n	800755c <USBH_LL_GetSpeed+0x34>
 800754e:	e008      	b.n	8007562 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
    break;
 8007554:	e008      	b.n	8007568 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007556:	2301      	movs	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
    break;
 800755a:	e005      	b.n	8007568 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800755c:	2302      	movs	r3, #2
 800755e:	73fb      	strb	r3, [r7, #15]
    break;
 8007560:	e002      	b.n	8007568 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007562:	2301      	movs	r3, #1
 8007564:	73fb      	strb	r3, [r7, #15]
    break;
 8007566:	bf00      	nop
  }
  return  speed;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007588:	4618      	mov	r0, r3
 800758a:	f7fa faeb 	bl	8001b64 <HAL_HCD_ResetPort>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	4618      	mov	r0, r3
 8007596:	f000 f901 	bl	800779c <USBH_Get_USB_Status>
 800759a:	4603      	mov	r3, r0
 800759c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800759e:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fa faf3 	bl	8001baa <HAL_HCD_HC_GetXferCount>
 80075c4:	4603      	mov	r3, r0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80075ce:	b590      	push	{r4, r7, lr}
 80075d0:	b089      	sub	sp, #36	; 0x24
 80075d2:	af04      	add	r7, sp, #16
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	461a      	mov	r2, r3
 80075dc:	4603      	mov	r3, r0
 80075de:	70fb      	strb	r3, [r7, #3]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70bb      	strb	r3, [r7, #2]
 80075e4:	4613      	mov	r3, r2
 80075e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80075f6:	787c      	ldrb	r4, [r7, #1]
 80075f8:	78ba      	ldrb	r2, [r7, #2]
 80075fa:	78f9      	ldrb	r1, [r7, #3]
 80075fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075fe:	9302      	str	r3, [sp, #8]
 8007600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	f897 3020 	ldrb.w	r3, [r7, #32]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4623      	mov	r3, r4
 800760e:	f7f9 ff38 	bl	8001482 <HAL_HCD_HC_Init>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f8bf 	bl	800779c <USBH_Get_USB_Status>
 800761e:	4603      	mov	r3, r0
 8007620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007622:	7bbb      	ldrb	r3, [r7, #14]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bd90      	pop	{r4, r7, pc}

0800762c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7f9 ffb1 	bl	80015b2 <HAL_HCD_HC_Halt>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f8a0 	bl	800779c <USBH_Get_USB_Status>
 800765c:	4603      	mov	r3, r0
 800765e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007660:	7bbb      	ldrb	r3, [r7, #14]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800766a:	b590      	push	{r4, r7, lr}
 800766c:	b089      	sub	sp, #36	; 0x24
 800766e:	af04      	add	r7, sp, #16
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	4608      	mov	r0, r1
 8007674:	4611      	mov	r1, r2
 8007676:	461a      	mov	r2, r3
 8007678:	4603      	mov	r3, r0
 800767a:	70fb      	strb	r3, [r7, #3]
 800767c:	460b      	mov	r3, r1
 800767e:	70bb      	strb	r3, [r7, #2]
 8007680:	4613      	mov	r3, r2
 8007682:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007692:	787c      	ldrb	r4, [r7, #1]
 8007694:	78ba      	ldrb	r2, [r7, #2]
 8007696:	78f9      	ldrb	r1, [r7, #3]
 8007698:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076a0:	9302      	str	r3, [sp, #8]
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	4623      	mov	r3, r4
 80076ae:	f7f9 ffa3 	bl	80015f8 <HAL_HCD_HC_SubmitRequest>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 f86f 	bl	800779c <USBH_Get_USB_Status>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd90      	pop	{r4, r7, pc}

080076cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	4611      	mov	r1, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fa fa4c 	bl	8001b80 <HAL_HCD_HC_GetURBState>
 80076e8:	4603      	mov	r3, r0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	460b      	mov	r3, r1
 80076fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007704:	2b01      	cmp	r3, #1
 8007706:	d103      	bne.n	8007710 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f872 	bl	80077f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007710:	20c8      	movs	r0, #200	; 0xc8
 8007712:	f7f9 fb6f 	bl	8000df4 <HAL_Delay>
  return USBH_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
 800772c:	4613      	mov	r3, r2
 800772e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007736:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	440b      	add	r3, r1
 8007746:	333b      	adds	r3, #59	; 0x3b
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	68f9      	ldr	r1, [r7, #12]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	440b      	add	r3, r1
 800775c:	3350      	adds	r3, #80	; 0x50
 800775e:	78ba      	ldrb	r2, [r7, #2]
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	e009      	b.n	8007778 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	440b      	add	r3, r1
 8007772:	3351      	adds	r3, #81	; 0x51
 8007774:	78ba      	ldrb	r2, [r7, #2]
 8007776:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7f9 fb30 	bl	8000df4 <HAL_Delay>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d817      	bhi.n	80077e0 <USBH_Get_USB_Status+0x44>
 80077b0:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <USBH_Get_USB_Status+0x1c>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	080077cf 	.word	0x080077cf
 80077c0:	080077d5 	.word	0x080077d5
 80077c4:	080077db 	.word	0x080077db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
    break;
 80077cc:	e00b      	b.n	80077e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80077ce:	2302      	movs	r3, #2
 80077d0:	73fb      	strb	r3, [r7, #15]
    break;
 80077d2:	e008      	b.n	80077e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
    break;
 80077d8:	e005      	b.n	80077e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80077da:	2302      	movs	r3, #2
 80077dc:	73fb      	strb	r3, [r7, #15]
    break;
 80077de:	e002      	b.n	80077e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80077e0:	2302      	movs	r3, #2
 80077e2:	73fb      	strb	r3, [r7, #15]
    break;
 80077e4:	bf00      	nop
  }
  return usb_status;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
 800780c:	e001      	b.n	8007812 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	461a      	mov	r2, r3
 8007816:	2101      	movs	r1, #1
 8007818:	4803      	ldr	r0, [pc, #12]	; (8007828 <MX_DriverVbusFS+0x34>)
 800781a:	f7f9 fdb7 	bl	800138c <HAL_GPIO_WritePin>
}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40020800 	.word	0x40020800

0800782c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800782c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007832:	e003      	b.n	800783c <LoopCopyDataInit>

08007834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007834:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800783a:	3104      	adds	r1, #4

0800783c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800783c:	480b      	ldr	r0, [pc, #44]	; (800786c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007844:	d3f6      	bcc.n	8007834 <CopyDataInit>
  ldr  r2, =_sbss
 8007846:	4a0b      	ldr	r2, [pc, #44]	; (8007874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007848:	e002      	b.n	8007850 <LoopFillZerobss>

0800784a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800784a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800784c:	f842 3b04 	str.w	r3, [r2], #4

08007850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007850:	4b09      	ldr	r3, [pc, #36]	; (8007878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007854:	d3f9      	bcc.n	800784a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007856:	f7f9 fa45 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800785a:	f000 f817 	bl	800788c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800785e:	f7f9 f847 	bl	80008f0 <main>
  bx  lr    
 8007862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007864:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007868:	08007ac4 	.word	0x08007ac4
  ldr  r0, =_sdata
 800786c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007870:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8007874:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8007878:	20000858 	.word	0x20000858

0800787c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800787c:	e7fe      	b.n	800787c <ADC_IRQHandler>
	...

08007880 <__errno>:
 8007880:	4b01      	ldr	r3, [pc, #4]	; (8007888 <__errno+0x8>)
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	2000002c 	.word	0x2000002c

0800788c <__libc_init_array>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4e0d      	ldr	r6, [pc, #52]	; (80078c4 <__libc_init_array+0x38>)
 8007890:	4c0d      	ldr	r4, [pc, #52]	; (80078c8 <__libc_init_array+0x3c>)
 8007892:	1ba4      	subs	r4, r4, r6
 8007894:	10a4      	asrs	r4, r4, #2
 8007896:	2500      	movs	r5, #0
 8007898:	42a5      	cmp	r5, r4
 800789a:	d109      	bne.n	80078b0 <__libc_init_array+0x24>
 800789c:	4e0b      	ldr	r6, [pc, #44]	; (80078cc <__libc_init_array+0x40>)
 800789e:	4c0c      	ldr	r4, [pc, #48]	; (80078d0 <__libc_init_array+0x44>)
 80078a0:	f000 f8ee 	bl	8007a80 <_init>
 80078a4:	1ba4      	subs	r4, r4, r6
 80078a6:	10a4      	asrs	r4, r4, #2
 80078a8:	2500      	movs	r5, #0
 80078aa:	42a5      	cmp	r5, r4
 80078ac:	d105      	bne.n	80078ba <__libc_init_array+0x2e>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078b4:	4798      	blx	r3
 80078b6:	3501      	adds	r5, #1
 80078b8:	e7ee      	b.n	8007898 <__libc_init_array+0xc>
 80078ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078be:	4798      	blx	r3
 80078c0:	3501      	adds	r5, #1
 80078c2:	e7f2      	b.n	80078aa <__libc_init_array+0x1e>
 80078c4:	08007abc 	.word	0x08007abc
 80078c8:	08007abc 	.word	0x08007abc
 80078cc:	08007abc 	.word	0x08007abc
 80078d0:	08007ac0 	.word	0x08007ac0

080078d4 <malloc>:
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <malloc+0xc>)
 80078d6:	4601      	mov	r1, r0
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f000 b861 	b.w	80079a0 <_malloc_r>
 80078de:	bf00      	nop
 80078e0:	2000002c 	.word	0x2000002c

080078e4 <free>:
 80078e4:	4b02      	ldr	r3, [pc, #8]	; (80078f0 <free+0xc>)
 80078e6:	4601      	mov	r1, r0
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	f000 b80b 	b.w	8007904 <_free_r>
 80078ee:	bf00      	nop
 80078f0:	2000002c 	.word	0x2000002c

080078f4 <memset>:
 80078f4:	4402      	add	r2, r0
 80078f6:	4603      	mov	r3, r0
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d100      	bne.n	80078fe <memset+0xa>
 80078fc:	4770      	bx	lr
 80078fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007902:	e7f9      	b.n	80078f8 <memset+0x4>

08007904 <_free_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4605      	mov	r5, r0
 8007908:	2900      	cmp	r1, #0
 800790a:	d045      	beq.n	8007998 <_free_r+0x94>
 800790c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007910:	1f0c      	subs	r4, r1, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfb8      	it	lt
 8007916:	18e4      	addlt	r4, r4, r3
 8007918:	f000 f8b0 	bl	8007a7c <__malloc_lock>
 800791c:	4a1f      	ldr	r2, [pc, #124]	; (800799c <_free_r+0x98>)
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	4610      	mov	r0, r2
 8007922:	b933      	cbnz	r3, 8007932 <_free_r+0x2e>
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	6014      	str	r4, [r2, #0]
 8007928:	4628      	mov	r0, r5
 800792a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792e:	f000 b8a6 	b.w	8007a7e <__malloc_unlock>
 8007932:	42a3      	cmp	r3, r4
 8007934:	d90c      	bls.n	8007950 <_free_r+0x4c>
 8007936:	6821      	ldr	r1, [r4, #0]
 8007938:	1862      	adds	r2, r4, r1
 800793a:	4293      	cmp	r3, r2
 800793c:	bf04      	itt	eq
 800793e:	681a      	ldreq	r2, [r3, #0]
 8007940:	685b      	ldreq	r3, [r3, #4]
 8007942:	6063      	str	r3, [r4, #4]
 8007944:	bf04      	itt	eq
 8007946:	1852      	addeq	r2, r2, r1
 8007948:	6022      	streq	r2, [r4, #0]
 800794a:	6004      	str	r4, [r0, #0]
 800794c:	e7ec      	b.n	8007928 <_free_r+0x24>
 800794e:	4613      	mov	r3, r2
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	b10a      	cbz	r2, 8007958 <_free_r+0x54>
 8007954:	42a2      	cmp	r2, r4
 8007956:	d9fa      	bls.n	800794e <_free_r+0x4a>
 8007958:	6819      	ldr	r1, [r3, #0]
 800795a:	1858      	adds	r0, r3, r1
 800795c:	42a0      	cmp	r0, r4
 800795e:	d10b      	bne.n	8007978 <_free_r+0x74>
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	4401      	add	r1, r0
 8007964:	1858      	adds	r0, r3, r1
 8007966:	4282      	cmp	r2, r0
 8007968:	6019      	str	r1, [r3, #0]
 800796a:	d1dd      	bne.n	8007928 <_free_r+0x24>
 800796c:	6810      	ldr	r0, [r2, #0]
 800796e:	6852      	ldr	r2, [r2, #4]
 8007970:	605a      	str	r2, [r3, #4]
 8007972:	4401      	add	r1, r0
 8007974:	6019      	str	r1, [r3, #0]
 8007976:	e7d7      	b.n	8007928 <_free_r+0x24>
 8007978:	d902      	bls.n	8007980 <_free_r+0x7c>
 800797a:	230c      	movs	r3, #12
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	e7d3      	b.n	8007928 <_free_r+0x24>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	1821      	adds	r1, r4, r0
 8007984:	428a      	cmp	r2, r1
 8007986:	bf04      	itt	eq
 8007988:	6811      	ldreq	r1, [r2, #0]
 800798a:	6852      	ldreq	r2, [r2, #4]
 800798c:	6062      	str	r2, [r4, #4]
 800798e:	bf04      	itt	eq
 8007990:	1809      	addeq	r1, r1, r0
 8007992:	6021      	streq	r1, [r4, #0]
 8007994:	605c      	str	r4, [r3, #4]
 8007996:	e7c7      	b.n	8007928 <_free_r+0x24>
 8007998:	bd38      	pop	{r3, r4, r5, pc}
 800799a:	bf00      	nop
 800799c:	200000b8 	.word	0x200000b8

080079a0 <_malloc_r>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	1ccd      	adds	r5, r1, #3
 80079a4:	f025 0503 	bic.w	r5, r5, #3
 80079a8:	3508      	adds	r5, #8
 80079aa:	2d0c      	cmp	r5, #12
 80079ac:	bf38      	it	cc
 80079ae:	250c      	movcc	r5, #12
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	4606      	mov	r6, r0
 80079b4:	db01      	blt.n	80079ba <_malloc_r+0x1a>
 80079b6:	42a9      	cmp	r1, r5
 80079b8:	d903      	bls.n	80079c2 <_malloc_r+0x22>
 80079ba:	230c      	movs	r3, #12
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	2000      	movs	r0, #0
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	f000 f85b 	bl	8007a7c <__malloc_lock>
 80079c6:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <_malloc_r+0xb4>)
 80079c8:	6814      	ldr	r4, [r2, #0]
 80079ca:	4621      	mov	r1, r4
 80079cc:	b991      	cbnz	r1, 80079f4 <_malloc_r+0x54>
 80079ce:	4c22      	ldr	r4, [pc, #136]	; (8007a58 <_malloc_r+0xb8>)
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	b91b      	cbnz	r3, 80079dc <_malloc_r+0x3c>
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 f841 	bl	8007a5c <_sbrk_r>
 80079da:	6020      	str	r0, [r4, #0]
 80079dc:	4629      	mov	r1, r5
 80079de:	4630      	mov	r0, r6
 80079e0:	f000 f83c 	bl	8007a5c <_sbrk_r>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d126      	bne.n	8007a36 <_malloc_r+0x96>
 80079e8:	230c      	movs	r3, #12
 80079ea:	6033      	str	r3, [r6, #0]
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 f846 	bl	8007a7e <__malloc_unlock>
 80079f2:	e7e4      	b.n	80079be <_malloc_r+0x1e>
 80079f4:	680b      	ldr	r3, [r1, #0]
 80079f6:	1b5b      	subs	r3, r3, r5
 80079f8:	d41a      	bmi.n	8007a30 <_malloc_r+0x90>
 80079fa:	2b0b      	cmp	r3, #11
 80079fc:	d90f      	bls.n	8007a1e <_malloc_r+0x7e>
 80079fe:	600b      	str	r3, [r1, #0]
 8007a00:	50cd      	str	r5, [r1, r3]
 8007a02:	18cc      	adds	r4, r1, r3
 8007a04:	4630      	mov	r0, r6
 8007a06:	f000 f83a 	bl	8007a7e <__malloc_unlock>
 8007a0a:	f104 000b 	add.w	r0, r4, #11
 8007a0e:	1d23      	adds	r3, r4, #4
 8007a10:	f020 0007 	bic.w	r0, r0, #7
 8007a14:	1ac3      	subs	r3, r0, r3
 8007a16:	d01b      	beq.n	8007a50 <_malloc_r+0xb0>
 8007a18:	425a      	negs	r2, r3
 8007a1a:	50e2      	str	r2, [r4, r3]
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	428c      	cmp	r4, r1
 8007a20:	bf0d      	iteet	eq
 8007a22:	6863      	ldreq	r3, [r4, #4]
 8007a24:	684b      	ldrne	r3, [r1, #4]
 8007a26:	6063      	strne	r3, [r4, #4]
 8007a28:	6013      	streq	r3, [r2, #0]
 8007a2a:	bf18      	it	ne
 8007a2c:	460c      	movne	r4, r1
 8007a2e:	e7e9      	b.n	8007a04 <_malloc_r+0x64>
 8007a30:	460c      	mov	r4, r1
 8007a32:	6849      	ldr	r1, [r1, #4]
 8007a34:	e7ca      	b.n	80079cc <_malloc_r+0x2c>
 8007a36:	1cc4      	adds	r4, r0, #3
 8007a38:	f024 0403 	bic.w	r4, r4, #3
 8007a3c:	42a0      	cmp	r0, r4
 8007a3e:	d005      	beq.n	8007a4c <_malloc_r+0xac>
 8007a40:	1a21      	subs	r1, r4, r0
 8007a42:	4630      	mov	r0, r6
 8007a44:	f000 f80a 	bl	8007a5c <_sbrk_r>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d0cd      	beq.n	80079e8 <_malloc_r+0x48>
 8007a4c:	6025      	str	r5, [r4, #0]
 8007a4e:	e7d9      	b.n	8007a04 <_malloc_r+0x64>
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	bf00      	nop
 8007a54:	200000b8 	.word	0x200000b8
 8007a58:	200000bc 	.word	0x200000bc

08007a5c <_sbrk_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4c06      	ldr	r4, [pc, #24]	; (8007a78 <_sbrk_r+0x1c>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4605      	mov	r5, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	f7f9 f910 	bl	8000c8c <_sbrk>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_sbrk_r+0x1a>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_sbrk_r+0x1a>
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20000854 	.word	0x20000854

08007a7c <__malloc_lock>:
 8007a7c:	4770      	bx	lr

08007a7e <__malloc_unlock>:
 8007a7e:	4770      	bx	lr

08007a80 <_init>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr

08007a8c <_fini>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	bf00      	nop
 8007a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a92:	bc08      	pop	{r3}
 8007a94:	469e      	mov	lr, r3
 8007a96:	4770      	bx	lr
